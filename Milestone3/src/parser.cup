import java.io.*;

	
/* Terminals (tokens returned by the scanner). */
terminal			BREAK, DEFAULT, FUNC, CASE, STRUCT, ELSE, PACKAGE, SWITCH, CONST, IF, 
					TYPE, FOR, IMPORT, RETURN, VAR, OR_OP, AND_OP, PLUS, MINUS, OPEN_PARAN, 
					CLOSE_PARAN, OPEN_CURLY, CLOSE_CURLY, OPEN_SQUARE, CLOSE_SQUARE, 
					SEMI_COLON, COMMA, DOT, COLON, COLON_EQUAL, EQUAL, CDOTS, ASTRISK, 
					SHIFT_LEFT, SHIFT_RIGHT, BAR, SLASH, EXCLAMATION, LESS_DASH, AMBERSAND,
					PERCENT, INCREMENT, DECREMENT;
terminal	String	IDENTIFIER, REL_OP, STRING_LIT, INT_LIT;	

/* Non-terminals */
nonterminal String	sourceFile, packageClause, importDecls, importDecl,
					topLevelDecl, topLevelDecls, packageName, importSpecs, importSpec, importPath, 
					optionalSemiColon, declaration, functionDecl, methodDecl, 
					constDecl, varDecl, constSpec, constSpecs, identifierList, 
					expressionList, primaryExpr, unaryExpr, operand, selector,
					arguments, literal, operandName, basicLit, functionLit, 
					qualifiedIdent, function, signature, functionBody, parameters, result, 
					type, parameterList, parameterDecl, block, statementList, statement, 
					typeName, typeLit, functionType, varSpec, varSpecs, shortVarDecl, functionName, 
					methodName, receiver, simpleStmt, returnStmt, breakStmt, 
					ifStmt, switchStmt, forStmt, expressionStmt, incDecStmt, assignment, 
					exprSwitchStmt, initStmt, postStmt, condition, forClause, 
					exprCaseClauses, exprCaseClause, exprSwitchCase;


nonterminal Express expression  ;
/*precedence left COMMA;
precedence left OR_OP;
precedence left AND_OP;
precedence left REL_OP;
precedence left PLUS, MINUS, BAR;
precedence left ASTRISK, SLASH, PERCENT, SHIFT_LEFT, SHIFT_RIGHT, AMBERSAND;*/
precedence left AND_OP, OR_OP;
precedence left REL_OP;
precedence left PLUS, MINUS, BAR;
precedence left ASTRISK, SLASH, SHIFT_LEFT, SHIFT_RIGHT, PERCENT, AMBERSAND;
precedence left EXCLAMATION, LESS_DASH;
precedence left OPEN_PARAN, CLOSE_PARAN;
precedence left COMMA, SEMI_COLON;
precedence left COLON;

start with sourceFile;

/* The grammar */
sourceFile	::=	packageClause:a optionalSemiColon:b importDecls:c topLevelDecls:d
				{:
				RESULT = d;
				:};

topLevelDecls	::=	topLevelDecl:a topLevelDecls:b
					{:
					RESULT = a+b;
					:}
					| 
					{:
					RESULT = "";
					:};

// TopLevelDecl = Declaration | FunctionDecl [ ​";" ​ ] | MethodDecl [ ​";" ​ ]
topLevelDecl	::=	declaration:d 
					{:
					RESULT = d;
					:}
					| functionDecl:d optionalSemiColon:o
					{:
					RESULT = d+o;
					:}
					| methodDecl:m optionalSemiColon:o
					{:
					RESULT = m+o;
					:};

// Declaration = ConstDecl ​";" ​ | VarDecl ​";"
declaration	::=	constDecl:c SEMI_COLON
				{:
				RESULT = c+"\n";
				:}
				| varDecl:v SEMI_COLON
				{:
				RESULT = v+"\n";
				:};

// ConstDecl = ​"const" ​ ( ConstSpec | ​"(" ​ { ConstSpec ​";" ​ } ​")" ​ )
constDecl	::=	CONST constSpec:c
				{:
				RESULT = c;
				:}
				| CONST OPEN_PARAN constSpecs:c CLOSE_PARAN
				{:
				RESULT = c;
				:}
				| CONST OPEN_PARAN CLOSE_PARAN
				{:
				RESULT ="";
				:};

constSpecs	::=	constSpec SEMI_COLON constSpecs
				{:
				:}
				| constSpec SEMI_COLON
				{:
				:};


// ConstSpec = ​identifier ​ [ [ Type ] ​"=" ​ Expression ]
constSpec	::=	IDENTIFIER:i
				{:
				RESULT = i+":";
				:}
				| IDENTIFIER:i EQUAL expression:e
				{:
				RESULT = i+" = "+e.code;
				:}
				| IDENTIFIER:i type:t EQUAL expression:e
				{:
				RESULT = i+" = "+e.code;
				:};
				
// Statement = Declaration | SimpleStmt ​";" ​| ReturnStmt ​";" ​ | BreakStmt ​";" ​ | Block [ ​";" ​] | IfStmt [ ​";" ​]
// | SwitchStmt [ ​";" ] ​| ForStmt [ ​";" ​]
statement	::=	declaration:d
				{:
				RESULT = d;
				:}
				| simpleStmt:s SEMI_COLON
				{:
				RESULT = s+"\n";
				:}
				| returnStmt:r SEMI_COLON
				{:
				RESULT = r+"\n";
				:}
				| breakStmt:b SEMI_COLON
				{:
				RESULT = b+"\n";
				:}
				| block:b optionalSemiColon:o
				{:
				RESULT = b+o;
				:}
				| ifStmt:i optionalSemiColon:o
				{:
				RESULT = i+o;
				:}
				| switchStmt:s optionalSemiColon:o
				{:
				RESULT = s+o;
				:}
				| forStmt:f optionalSemiColon:o
				{:
				RESULT = f+o;
				:};

// SimpleStmt = ExpressionStmt | IncDecStmt | Assignment | ShortVarDecl
simpleStmt	::= expressionStmt:e
				{:
				RESULT = e;
				:}
				| incDecStmt:i
				{:
				RESULT = i;
				:}
				| assignment:a
				{:
				RESULT = a;
				:}
				| shortVarDecl:s
				{:
				RESULT = s;
				:};

// ExpressionStmt = Expression
expressionStmt	::= expression:e
					{:
					RESULT = e.code;
					// System.out.println(RESULT);
					:};

// IncDecStmt = Expression ( ​"++" ​ | ​"--" ​ )
incDecStmt	::= expression:e INCREMENT:i
				{:
				RESULT = e.code+"++";
				:}
				| expression:e DECREMENT:d
				{:
				RESULT = e.code+"--";
				:};

// Assignment = ExpressionList [ ​"+" ​ | ​"-" ​| ​"*" ​ | ​"/" ​ | ​"<<" ​ | ​">>" ​] ​"=" ​ ExpressionList
assignment	::=	expressionList:e1 PLUS EQUAL expressionList:e2
				{:
				Express dds = new Express();
				RESULT = e1+"+"+" ="+dds.counter+e2;
				:}|
				expressionList:e1 MINUS EQUAL expressionList:e2
				{:
				Express dds = new Express();
				RESULT = e1+"-"+" ="+dds.counter+e2;
				:}|
				expressionList:e1 ASTRISK EQUAL expressionList:e2
				{:
				Express dds = new Express();
				RESULT = e1+"*"+" ="+dds.counter+e2;
				:}|
				expressionList:e1 SLASH EQUAL expressionList:e2
				{:
				Express dds = new Express();
				RESULT = e1+"/"+" ="+dds.counter+e2;
				:}|
				expressionList:e1 SHIFT_LEFT EQUAL expressionList:e2
				{:
				Express dds = new Express();
				RESULT = e1+"<<"+" ="+dds.counter+e2;
				:}|
				expressionList:e1 SHIFT_RIGHT EQUAL expressionList:e2
				{:
				Express dds = new Express();
				RESULT = e1+">>"+" ="+dds.counter+e2;
				:}|
				expressionList:e1 EQUAL expressionList:e2
				{:
				Express dds = new Express();
				RESULT = e1+" ="+dds.counter+e2;
				:};


// IfStmt = ​"if" ​ [ SimpleStmt ​";" ​ ] Expression Block [ ​"else" ​ ( IfStmt | Block ) ]
ifStmt	::=	IF expression:e block:b
			{:
			RESULT = "if" + e.code + b;
			:}
			| IF simpleStmt:s SEMI_COLON expression:e block:b
			{:
			RESULT = "if" + s + ";\n" + e.code + b;
			:}
			| IF expression:e block:b ELSE:el ifStmt:i
			{:
			RESULT = "if" + e.code + b + el + i;
			:}
			| IF expression:e block:b ELSE:el block:i
			{:
			RESULT = "if" + e.code + b + el + i;
			:}
			| IF simpleStmt:s SEMI_COLON expression:e block:b ELSE:el ifStmt:i
			{:
			RESULT = "if" + s + ";\n" + e.code + b + el+ i;
			:}
			| IF simpleStmt:s SEMI_COLON expression:e block:b1 ELSE:el block:b2
			{:
			RESULT = "if" + s + ";\n" + e.code + b1 + el+ b2;
			:};

// SwitchStmt = ExprSwitchStmt
switchStmt	::=	exprSwitchStmt:e
				{:
				RESULT = e;
				:};

// ExprSwitchStmt = ​"switch" ​ [ SimpleStmt ​";" ​ ] [ Expression ] ​"{" ​ { ExprCaseClause } ​"}"
exprSwitchStmt	::= SWITCH OPEN_CURLY exprCaseClauses:e CLOSE_CURLY
					{:
					RESULT = "switch"+"{"+e+"}\n";
					:}
					| SWITCH  simpleStmt:s SEMI_COLON OPEN_CURLY exprCaseClauses:e CLOSE_CURLY
					{:
					RESULT = "switch"+ s + ";\n" + "{" + e + "}\n";
					:}
					| SWITCH expression:e OPEN_CURLY exprCaseClauses:e2 CLOSE_CURLY
					{:
					RESULT = "switch"+ e.code + "{" + e2 + "}\n";
					:}
					| SWITCH simpleStmt:s SEMI_COLON expression:e OPEN_CURLY exprCaseClauses:e1 CLOSE_CURLY
					{:
					RESULT = "switch"+ s + ";\n" + e.code + "{" + e1 + "}\n";
					:};


exprCaseClauses	::=	exprCaseClause:e exprCaseClauses:e2
					{:
					RESULT = e+e2;
					:}
					| 
					{:
					RESULT = "";
					:};

// ExprCaseClause = ExprSwitchCase ​":" ​ StatementList .
exprCaseClause	::= exprSwitchCase:e COLON statementList:s
					{:
					RESULT = e+":"+s;
					:};

// ExprSwitchCase = ​"case" ​ Expression | ​"default" ​ .
exprSwitchCase	::=	CASE expression:e
					{:
					RESULT = "case" + e.code;
					:}
					| DEFAULT
					{:
					RESULT = "default";
					:};

// ForStmt = ​"for" ​ ForClause Block
forStmt	::=	FOR forClause:f block:b
			{:
			RESULT = "for" + f + b;
			:};

// ForClause = InitStmt ​";" ​ Condition ​";" ​ PostStmt .
forClause	::=	initStmt:i SEMI_COLON condition:c SEMI_COLON postStmt:p
				{:
				RESULT = i + ";\n" + c + ";\n" + p;
				:};

// Condition = Expression
condition	::=	expression:e
				{:
				RESULT = e.code;
				:};

// InitStmt = SimpleStmt
initStmt	::=	simpleStmt:s
				{:
				RESULT = s;
				:};

// PostStmt = SimpleStmt
postStmt	::=	simpleStmt:s
				{:
				RESULT = s;
				:};

// ReturnStmt = ​"return" ​ [ ExpressionList ]
returnStmt	::=	RETURN
				{:
				RESULT = "return";
				:}
				| RETURN expressionList:e
				{:
				RESULT = "return" + e;
				:};

// BreakStmt = ​"break"
breakStmt	::=	BREAK
				{:
				RESULT = "break";
				:};


// IdentifierList = ​identifier ​ { ​"," identifier ​ }
identifierList	::=	IDENTIFIER:i
					{:
					RESULT = i;
					:}
					| IDENTIFIER:i COMMA:c identifierList:l
					{:
					RESULT = i+c+l;
					:};

// ExpressionList = Expression { ​"," ​ Expression }
expressionList	::=	expression:e
					{:
					RESULT = e.code;
					:}
					| expression:e COMMA expressionList:l
					{:
					RESULT = e.code+","+l;
					:};

// 100%----------------------------------------------------------------------
expression	::=	unaryExpr:u
				{:
				RESULT  =  new Express();
				RESULT.setCode(u);
				:}
				| expression:a REL_OP:r expression:b
				{:
				RESULT= new Express(a,r,b);
				RESULT.address = Express.Temp();
				// System.out.println(RESULT.code);
				:}
				| expression:a OR_OP expression:b
				{:
				RESULT= new Express(a,"||",b);
				RESULT.address = Express.Temp();
				:}
				| expression:a AND_OP expression:b
				{:
				RESULT= new Express(a,"&&",b);
				RESULT.address = Express.Temp();
				:}

				| expression:a PLUS expression:b
				{:
				RESULT= new Express(a,"+",b);
				RESULT.address = Express.Temp();
				:}
				| expression:a MINUS expression:b
				{:
				RESULT= new Express(a,"-",b);
				RESULT.address = Express.Temp();
				:}
				| expression:a ASTRISK expression:b
				{:
				RESULT= new Express(a,"*",b);
				RESULT.address = Express.Temp();
				:}
				| expression:a SLASH expression:b
				{:
				RESULT= new Express(a,"/",b);
				RESULT.address = Express.Temp();
				:}
				| expression:a PERCENT expression:b
				{:
				RESULT= new Express(a,"%",b);
				RESULT.address = Express.Temp();
				:}
				| expression:a SHIFT_LEFT expression:b
				{:
				RESULT= new Express(a,"<<",b);
				RESULT.address = Express.Temp();
				:}
				| expression:a SHIFT_RIGHT expression:b
				{:
				RESULT= new Express(a,">>",b);
				RESULT.address = Express.Temp();
				:}
				
				| expression:a AMBERSAND expression:b
				{:
				RESULT= new Express(a,"&",b);
				RESULT.address = Express.Temp();
				:}
				| expression:a EXCLAMATION expression:b
				{:
				RESULT= new Express(a,"!",b);
				RESULT.address = Express.Temp();
				:};


// Type = TypeName | TypeLit
type	::= typeName:a
			{:
			RESULT = a;
			:}
			| typeLit:b
			{:
			RESULT = b;
			:};

// TypeName = ​identifier
typeName	::=	IDENTIFIER:a
				{:
				RESULT = a;
				:};

// TypeLit = FunctionType
typeLit	::=	functionType:f
			{:
			RESULT = f;
			:};

// FunctionType = ​"func" ​ Signature
functionType	::=	FUNC signature:s
					{:
					RESULT =  s;
					:};

// VarDecl = ​"var" ​ ( VarSpec | ​"(" ​ { VarSpec ​";" ​ } ​")" ​ )
varDecl	::=	VAR varSpec:v 
			{:
			RESULT = v;
			:}
			| VAR OPEN_PARAN varSpecs:v CLOSE_PARAN
			{:
			RESULT = v ;
			:};


varSpecs	::= varSpec SEMI_COLON varSpecs
				{:
				:}
				| 
				{:
				:};

// VarSpec = ​identifier ​ ( Type [ ​"=" ​ Expression ] | ​"=" ​ Expression )
varSpec	::= IDENTIFIER:i EQUAL expression:e
			{:
			RESULT = i+" ="+e.code;
			:}
			| IDENTIFIER:i type:t
			{:
			RESULT = i+t;
			:}
			| IDENTIFIER:i type:t EQUAL expression:e
			{:
			RESULT = i+t+" ="+e.code;
			:};

// ShortVarDecl = IdentifierList ​ ":=" ​ Expression
shortVarDecl	::= identifierList:i COLON_EQUAL expression:e
					{:
					RESULT = i+e.code;
					:};

// FunctionDecl = ​"func" ​ FunctionName ( Function | Signature )
functionDecl	::= FUNC functionName:n function:f
					{:
					RESULT = n+f;
					:}
					| FUNC functionName:n signature:s
					{:
					RESULT = n+s;
					:};

// FunctionName= ​identifier
functionName	::= IDENTIFIER:i
					{:
					RESULT = i;
					:};

// MethodDecl = ​"func" ​ Receiver MethodName ( Function | Signature ) .
methodDecl	::= FUNC receiver:r methodName:m function:f
				{:
				RESULT = "func"+r+m+f;
				:}
				| FUNC receiver:r methodName:m signature:s
				{:
				RESULT = "func"+r+m+s;
				:};

// Receiver = Parameters
receiver	::= parameters:p
				{:
				RESULT = p;
				:};

// MethodName = ​identifier
methodName	::=	IDENTIFIER:i
				{:
				RESULT = i;
				// System.out.println(RESULT);
				:};

// 100%----------------------------------------------------------------------
// UnaryExpr = PrimaryExpr | ( ​"-" ​ | ​"!" ​ | ​"*" ​) UnaryExpr .
unaryExpr	::=	primaryExpr:s
				{:
				RESULT=s;
				:}
				| MINUS unaryExpr:b
				{:
				RESULT ="-"+b;
				:}
				| EXCLAMATION unaryExpr:b
				{:
				RESULT ="!"+b;
				:}
				| ASTRISK unaryExpr:b
				{:
				RESULT ="*"+b;
				:}
				| AMBERSAND unaryExpr:b
				{:
				RESULT ="&"+b;
				:}
				| LESS_DASH unaryExpr:b
				{:
				RESULT ="<-"+b;
				:};

//PrimaryExpr = Operand | PrimaryExpr Selector | PrimaryExpr Arguments .
primaryExpr	::=	operand:o
				{:
				RESULT = o;
				// System.out.println(RESULT);
				:}
				| primaryExpr:p selector:s
				{:
				Express d= new Express();
				RESULT = p+s;
				// System.out.println(RESULT);
				:}
				| primaryExpr:p arguments:a
				{:
				Express s= new Express();
				RESULT = "push_params: "+ a + "\nt" + s.counter + "= " + "call" + p +"\npop_params;";
				// System.out.println(RESULT);
				:};


// Selector = ​"." identifier
selector	::= DOT IDENTIFIER:i
				{:
				RESULT =i;
				// System.out.println(RESULT);
				:};



// Arguments = ​"(" ​ [ ExpressionList ] ​")"
arguments	::=	OPEN_PARAN CLOSE_PARAN
				{:
				RESULT = "";
				:}
				| OPEN_PARAN expressionList:e CLOSE_PARAN
				{:
				RESULT = e;
				:};


// Operand = Literal | OperandName | ​"(" ​ Expression ​")" ​ .
operand	::=	literal:l
			{:
			RESULT = l;
			:}
			| operandName:o
			{:
			RESULT = o;
			:}
			| OPEN_PARAN expression:e CLOSE_PARAN
			{:
			RESULT =  e.code;
			:};

//Literal = BasicLit | FunctionLit
literal	::=	basicLit:b
			{:
			RESULT = b;
			:}
			| functionLit:f
			{:
			RESULT = f;
			:};


// BasicLit = ​int_lit ​ | ​string_lit ​ 
basicLit	::=	INT_LIT:i
				{:
				RESULT = ""+i;
				:}
				| STRING_LIT:s
				{:
				RESULT = s;
				:};

// OperandName = ​identifier ​ | QualifiedIdent
operandName	::=	IDENTIFIER:i
				{:
				RESULT = i;
				:}
				| qualifiedIdent:q
				{:
				RESULT = q;
				:};

// QualifiedIdent = ​"." ​ PackageName ​"." identifier
qualifiedIdent	::=	DOT packageName:p DOT IDENTIFIER:i
					{:
					RESULT = p+i;
					:};
					

// FunctionLit = ​"func" ​ Function .		
functionLit	::=	FUNC function:f
				{:
				RESULT = "func"+f;
				:};


// Function = Signature FunctionBody
function	::=	signature:s functionBody:f
				{:
				RESULT = s+f;
				:};

// Signature = Parameters [ Result ]
signature	::=	parameters:p
				{:
				RESULT = p;
				:}
				| parameters:p result:r
				{:
				RESULT = p+r;
				:};

// Result = Parameters | ​"(" ​ Type ​")"
result	::=	parameters:s
			{:
			RESULT = s;
			:}
			| OPEN_PARAN type:b CLOSE_PARAN
			{:
			RESULT =  b ;
			:};

// Parameters = ​"(" ​ [ ParameterList ] ​")" ​
parameters	::=	OPEN_PARAN CLOSE_PARAN
				{:
				RESULT = "";
				:}
				| OPEN_PARAN parameterList:p CLOSE_PARAN
				{:
				RESULT = p;
				// System.out.println(RESULT);
				:}; 

// ParameterList = ParameterDecl { ​"," ​ ParameterDecl }
parameterList	::=	parameterDecl:p
					{:
					RESULT = p;
					:}
					| parameterDecl:p COMMA parameterList:l
					{:
					RESULT = p+","+l;
					// System.out.println(RESULT);

					:};

// ParameterDecl = IdentifierList [ ​"..." ​ ] Type .
parameterDecl	::= identifierList:i type:t
					{:
					RESULT = i+t;
					// System.out.println(RESULT);
					:}
					| identifierList:i CDOTS type:t
					{:
					RESULT = i+"..."+t;
					// System.out.println(RESULT);
					:};

// FunctionBody = Block
functionBody	::= block:b
					{:
					RESULT = "\nbegin_func;\n" + b + "end_func;" ;
					:};

// Block = ​"{" ​ StatementList ​"}" ​
block	::= OPEN_CURLY statementList:s CLOSE_CURLY
			{:
			RESULT = s;
			// System.out.println(RESULT);
			:};

// StatementList = { Statement }
statementList	::=	statement:s statementList:l
					{:
					RESULT = s+l;
				// System.out.println(RESULT);
					:}
					| 
					{:
					RESULT = "";
					:};

// PackageClause = ​"package" ​ PackageName .
packageClause	::=	PACKAGE packageName:a
					{:
					RESULT = a;
					:};


importDecls	::=	importDecl:i optionalSemiColon:o importDecls:d
				{:
				RESULT = i + o + d;
				:}
				|
				{:
				RESULT = "";
				:};
// ImportDecl = ​"import" ​ ( ImportSpec | ​"(" ​ { ImportSpec [ ​";" ​ ] } ​")" ​ ) .
importDecl	::=	IMPORT	importSpec:i
				{:
				RESULT ="";
				:}
				| IMPORT OPEN_PARAN importSpecs:i CLOSE_PARAN
				{:
				RESULT = "";
				:};

importSpecs	::=	importSpec:i1 optionalSemiColon:o importSpecs:i2
				{:
				RESULT = "" + o ;
				:}
				| 
				{:
				RESULT = "";
				:};

// ImportSpec = [ ​"." ​ | PackageName ] ImportPath
importSpec	::=	importPath:i
				{:
				RESULT = i;
				:}
				| DOT importPath:p
				{:
				RESULT = p;
				:}
				| packageName:p importPath:i
				{:
				RESULT = p + i;
				:};
				
importPath	::=	STRING_LIT:l
				{:
				RESULT = "";
				:};

// PackageName = ​identifier
packageName	::=	IDENTIFIER:a
				{:
				RESULT = a + ":\n";
				:};


optionalSemiColon	::=	SEMI_COLON
						{:
						RESULT = ";\n";
						:}
						| 
						{:
						RESULT = "";
						:};