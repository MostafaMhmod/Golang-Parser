
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\242\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\006\003\000\002\006\004\000\002\006\004" +
    "\000\002\014\004\000\002\014\004\000\002\017\004\000" +
    "\002\017\006\000\002\017\005\000\002\021\003\000\002" +
    "\021\005\000\002\021\006\000\002\050\003\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\004\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\070\003\000\002\071\004\000\002\071" +
    "\004\000\002\072\006\000\002\072\006\000\002\072\006" +
    "\000\002\072\006\000\002\072\006\000\002\072\006\000" +
    "\002\072\006\000\002\072\006\000\002\072\006\000\002" +
    "\072\005\000\002\065\005\000\002\065\007\000\002\065" +
    "\007\000\002\065\007\000\002\065\011\000\002\065\011" +
    "\000\002\066\003\000\002\073\006\000\002\073\010\000" +
    "\002\073\007\000\002\073\011\000\002\100\004\000\002" +
    "\100\002\000\002\101\005\000\002\102\004\000\002\102" +
    "\003\000\002\067\004\000\002\067\005\000\002\067\005" +
    "\000\002\077\007\000\002\077\006\000\002\077\006\000" +
    "\002\077\006\000\002\077\005\000\002\077\005\000\002" +
    "\077\005\000\002\077\004\000\002\076\003\000\002\074" +
    "\003\000\002\075\003\000\002\063\003\000\002\063\004" +
    "\000\002\064\003\000\002\022\003\000\002\022\005\000" +
    "\002\023\003\000\002\023\005\000\002\103\003\000\002" +
    "\103\005\000\002\103\005\000\002\103\005\000\002\103" +
    "\005\000\002\103\005\000\002\103\005\000\002\103\005" +
    "\000\002\103\005\000\002\103\005\000\002\103\005\000" +
    "\002\103\005\000\002\103\005\000\002\043\003\000\002" +
    "\043\003\000\002\051\003\000\002\052\003\000\002\053" +
    "\004\000\002\020\004\000\002\020\006\000\002\054\005" +
    "\000\002\054\002\000\002\055\005\000\002\055\004\000" +
    "\002\055\006\000\002\056\005\000\002\015\005\000\002" +
    "\015\005\000\002\057\003\000\002\016\006\000\002\016" +
    "\006\000\002\061\003\000\002\060\003\000\002\025\003" +
    "\000\002\025\004\000\002\025\004\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\024\003\000\002" +
    "\024\004\000\002\024\004\000\002\027\004\000\002\030" +
    "\004\000\002\030\005\000\002\030\010\000\002\026\003" +
    "\000\002\026\003\000\002\026\005\000\002\031\003\000" +
    "\002\031\003\000\002\033\003\000\002\033\003\000\002" +
    "\032\003\000\002\032\003\000\002\035\006\000\002\034" +
    "\004\000\002\036\004\000\002\037\003\000\002\037\004" +
    "\000\002\042\003\000\002\042\005\000\002\041\004\000" +
    "\002\041\005\000\002\044\003\000\002\044\005\000\002" +
    "\045\004\000\002\045\005\000\002\040\003\000\002\046" +
    "\005\000\002\047\004\000\002\047\002\000\002\003\004" +
    "\000\002\004\005\000\002\004\002\000\002\005\004\000" +
    "\002\005\006\000\002\010\005\000\002\010\002\000\002" +
    "\011\003\000\002\011\004\000\002\011\004\000\002\012" +
    "\003\000\002\007\003\000\002\013\003\000\002\013\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\004\012\006\001\002\000\004\002\u0132\001" +
    "\002\000\016\002\uff60\006\uff60\014\uff60\020\uff60\022\uff60" +
    "\035\011\001\002\000\004\057\010\001\002\000\016\002" +
    "\uff6d\006\uff6d\014\uff6d\020\uff6d\022\uff6d\035\uff6d\001\002" +
    "\000\022\002\uff62\006\uff62\014\uff62\020\uff62\022\uff62\035" +
    "\uff62\037\uff62\061\uff62\001\002\000\064\002\uff61\004\uff61" +
    "\005\uff61\006\uff61\007\uff61\013\uff61\014\uff61\015\uff61\017" +
    "\uff61\020\uff61\021\uff61\022\uff61\026\uff61\027\uff61\030\uff61" +
    "\031\uff61\032\uff61\037\uff61\044\uff61\051\uff61\052\uff61\053" +
    "\uff61\057\uff61\061\uff61\062\uff61\001\002\000\014\002\uff6b" +
    "\006\uff6b\014\uff6b\020\013\022\uff6b\001\002\000\012\027" +
    "\u0129\037\u012a\057\010\061\u0128\001\002\000\016\002\uff60" +
    "\006\uff60\014\uff60\020\uff60\022\uff60\035\011\001\002\000" +
    "\012\002\uffff\006\017\014\026\022\024\001\002\000\004" +
    "\035\u0122\001\002\000\006\027\153\057\u0118\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\000\001\002\000\006" +
    "\002\uff60\035\011\001\002\000\006\002\uff60\035\011\001" +
    "\002\000\006\027\u010a\057\u0109\001\002\000\004\035\u0108" +
    "\001\002\000\006\027\031\057\030\001\002\000\004\035" +
    "\ufff9\001\002\000\014\006\035\030\ufff6\035\ufff6\042\040" +
    "\057\042\001\002\000\006\030\032\057\030\001\002\000" +
    "\004\035\ufff7\001\002\000\004\030\034\001\002\000\004" +
    "\035\ufff8\001\002\000\004\027\153\001\002\000\012\030" +
    "\uffa8\035\uffa8\036\uffa8\042\uffa8\001\002\000\012\030\uffa7" +
    "\035\uffa7\036\uffa7\042\uffa7\001\002\000\030\006\053\026" +
    "\057\027\056\037\060\044\051\051\046\052\055\053\047" +
    "\057\050\061\045\062\062\001\002\000\004\042\044\001" +
    "\002\000\012\030\uffa6\035\uffa6\036\uffa6\042\uffa6\001\002" +
    "\000\012\030\uffa5\035\uffa5\036\uffa5\042\uffa5\001\002\000" +
    "\030\006\053\026\057\027\056\037\060\044\051\051\046" +
    "\052\055\053\047\057\050\061\045\062\062\001\002\000" +
    "\060\023\uff81\024\uff81\025\uff81\026\uff81\027\uff81\030\uff81" +
    "\031\uff81\035\uff81\036\uff81\037\uff81\040\uff81\042\uff81\044" +
    "\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\060\uff81\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\060\023" +
    "\uff80\024\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80" +
    "\035\uff80\036\uff80\037\uff80\040\uff80\042\uff80\044\uff80\045" +
    "\uff80\046\uff80\047\uff80\050\uff80\051\uff80\053\uff80\054\uff80" +
    "\055\uff80\056\uff80\060\uff80\001\002\000\030\006\053\026" +
    "\057\027\056\037\060\044\051\051\046\052\055\053\047" +
    "\057\050\061\045\062\062\001\002\000\036\023\107\024" +
    "\116\025\110\026\102\030\ufff4\035\ufff4\044\115\045\114" +
    "\046\105\050\103\051\113\053\111\054\106\060\104\001" +
    "\002\000\004\027\153\001\002\000\060\023\uff84\024\uff84" +
    "\025\uff84\026\uff84\027\uff84\030\uff84\031\uff84\035\uff84\036" +
    "\uff84\037\uff84\040\uff84\042\uff84\044\uff84\045\uff84\046\uff84" +
    "\047\uff84\050\uff84\051\uff84\053\uff84\054\uff84\055\uff84\056" +
    "\uff84\060\uff84\001\002\000\030\006\053\026\057\027\056" +
    "\037\060\044\051\051\046\052\055\053\047\057\050\061" +
    "\045\062\062\001\002\000\030\006\053\026\057\027\056" +
    "\037\060\044\051\051\046\052\055\053\047\057\050\061" +
    "\045\062\062\001\002\000\030\006\053\026\057\027\056" +
    "\037\060\044\051\051\046\052\055\053\047\057\050\061" +
    "\045\062\062\001\002\000\004\057\010\001\002\000\060" +
    "\023\uff87\024\uff87\025\uff87\026\uff87\027\uff87\030\uff87\031" +
    "\uff87\035\uff87\036\uff87\037\uff87\040\uff87\042\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\053\uff87\054" +
    "\uff87\055\uff87\056\uff87\060\uff87\001\002\000\060\023\uff82" +
    "\024\uff82\025\uff82\026\uff82\027\uff82\030\uff82\031\uff82\035" +
    "\uff82\036\uff82\037\uff82\040\uff82\042\uff82\044\uff82\045\uff82" +
    "\046\uff82\047\uff82\050\uff82\051\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\uff82\060\uff82\001\002\000\060\023\uff94\024\uff94" +
    "\025\uff94\026\uff94\027\073\030\uff94\031\uff94\035\uff94\036" +
    "\uff94\037\074\040\uff94\042\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\053\uff94\054\uff94\055\uff94\056" +
    "\uff94\060\uff94\001\002\000\060\023\uff86\024\uff86\025\uff86" +
    "\026\uff86\027\uff86\030\uff86\031\uff86\035\uff86\036\uff86\037" +
    "\uff86\040\uff86\042\uff86\044\uff86\045\uff86\046\uff86\047\uff86" +
    "\050\uff86\051\uff86\053\uff86\054\uff86\055\uff86\056\uff86\060" +
    "\uff86\001\002\000\060\023\uff8e\024\uff8e\025\uff8e\026\uff8e" +
    "\027\uff8e\030\uff8e\031\uff8e\035\uff8e\036\uff8e\037\uff8e\040" +
    "\uff8e\042\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e" +
    "\051\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e\060\uff8e\001" +
    "\002\000\060\023\uff7f\024\uff7f\025\uff7f\026\uff7f\027\uff7f" +
    "\030\uff7f\031\uff7f\035\uff7f\036\uff7f\037\uff7f\040\uff7f\042" +
    "\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f" +
    "\053\uff7f\054\uff7f\055\uff7f\056\uff7f\060\uff7f\001\002\000" +
    "\060\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\030\uff83" +
    "\031\uff83\035\uff83\036\uff83\037\uff83\040\uff83\042\uff83\044" +
    "\uff83\045\uff83\046\uff83\047\uff83\050\uff83\051\uff83\053\uff83" +
    "\054\uff83\055\uff83\056\uff83\060\uff83\001\002\000\054\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\030\uffb5\031\uffb5\035\uffb5" +
    "\036\uffb5\040\uffb5\042\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\060\uffb5\001\002\000\060\023\uff8d\024\uff8d\025\uff8d\026" +
    "\uff8d\027\uff8d\030\uff8d\031\uff8d\035\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\042\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d\050" +
    "\uff8d\051\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\060\uff8d" +
    "\001\002\000\060\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027" +
    "\uff8c\030\uff8c\031\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c" +
    "\042\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051" +
    "\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\060\uff8c\001\002" +
    "\000\034\006\053\016\100\026\057\027\056\030\076\037" +
    "\060\044\051\051\046\052\055\053\047\057\050\061\045" +
    "\062\062\001\002\000\004\057\075\001\002\000\060\023" +
    "\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031\uff8b" +
    "\035\uff8b\036\uff8b\037\uff8b\040\uff8b\042\uff8b\044\uff8b\045" +
    "\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\056\uff8b\060\uff8b\001\002\000\060\023\uff8a\024" +
    "\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\042\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\060\uff8a\001\002\000\004\030\140\001\002\000" +
    "\006\006\035\057\042\001\002\000\050\023\107\024\116" +
    "\025\110\026\102\030\uffb7\031\uffb7\035\uffb7\036\112\040" +
    "\uffb7\042\uffb7\044\115\045\114\046\105\047\uffb7\050\103" +
    "\051\113\053\111\054\106\060\104\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\054\023" +
    "\uffb2\024\uffb2\025\110\026\102\030\uffb2\031\uffb2\035\uffb2" +
    "\036\uffb2\040\uffb2\042\uffb2\044\115\045\114\046\105\047" +
    "\uffb2\050\103\051\113\053\111\054\106\055\uffb2\056\uffb2" +
    "\060\uffb2\001\002\000\054\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\030\uffaf\031\uffaf\035\uffaf\036\uffaf\040\uffaf\042\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\113\053" +
    "\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf\001\002\000\054" +
    "\023\uffac\024\uffac\025\uffac\026\uffac\030\uffac\031\uffac\035" +
    "\uffac\036\uffac\040\uffac\042\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\113\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\060\uffac\001\002\000\054\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\030\uffa9\031\uffa9\035\uffa9\036\uffa9\040\uffa9\042" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\056\uffa9\060\uffa9\001\002\000" +
    "\036\025\uffb6\026\uffb6\030\uffb6\031\uffb6\035\uffb6\040\uffb6" +
    "\042\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\053" +
    "\uffb6\054\uffb6\001\002\000\054\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\030\uffaa\031\uffaa\035\uffaa\036\uffaa\040\uffaa\042" +
    "\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\113" +
    "\053\uffaa\054\uffaa\055\uffaa\056\uffaa\060\uffaa\001\002\000" +
    "\054\023\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1\031\uffb1" +
    "\035\uffb1\036\uffb1\040\uffb1\042\uffb1\044\115\045\114\046" +
    "\105\047\uffb1\050\103\051\113\053\111\054\106\055\uffb1" +
    "\056\uffb1\060\uffb1\001\002\000\054\023\uffb3\024\uffb3\025" +
    "\110\026\102\030\uffb3\031\uffb3\035\uffb3\036\uffb3\040\uffb3" +
    "\042\uffb3\044\115\045\114\046\105\047\uffb3\050\103\051" +
    "\113\053\111\054\106\055\uffb3\056\uffb3\060\uffb3\001\002" +
    "\000\054\023\uffad\024\uffad\025\uffad\026\uffad\030\uffad\031" +
    "\uffad\035\uffad\036\uffad\040\uffad\042\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\113\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\060\uffad\001\002\000\054\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\030\uffab\031\uffab\035\uffab\036\uffab\040" +
    "\uffab\042\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\051\113\053\uffab\054\uffab\055\uffab\056\uffab\060\uffab\001" +
    "\002\000\054\023\uffb4\024\uffb4\025\110\026\102\030\uffb4" +
    "\031\uffb4\035\uffb4\036\uffb4\040\uffb4\042\uffb4\044\115\045" +
    "\114\046\105\047\uffb4\050\103\051\113\053\111\054\106" +
    "\055\uffb4\056\uffb4\060\uffb4\001\002\000\054\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\030\uffae\031\uffae\035\uffae\036\uffae" +
    "\040\uffae\042\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\113\053\uffae\054\uffae\055\uffae\056\uffae\060\uffae" +
    "\001\002\000\054\023\uffb0\024\uffb0\025\uffb0\026\uffb0\030" +
    "\uffb0\031\uffb0\035\uffb0\036\uffb0\040\uffb0\042\uffb0\044\115" +
    "\045\114\046\105\047\uffb0\050\103\051\113\053\111\054" +
    "\106\055\uffb0\056\uffb0\060\uffb0\001\002\000\004\036\135" +
    "\001\002\000\030\006\053\026\057\027\056\037\060\044" +
    "\051\051\046\052\055\053\047\057\050\061\045\062\062" +
    "\001\002\000\004\030\137\001\002\000\060\023\uff88\024" +
    "\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88\035\uff88" +
    "\036\uff88\037\uff88\040\uff88\042\uff88\044\uff88\045\uff88\046" +
    "\uff88\047\uff88\050\uff88\051\uff88\053\uff88\054\uff88\055\uff88" +
    "\056\uff88\060\uff88\001\002\000\060\023\uff89\024\uff89\025" +
    "\uff89\026\uff89\027\uff89\030\uff89\031\uff89\035\uff89\036\uff89" +
    "\037\uff89\040\uff89\042\uff89\044\uff89\045\uff89\046\uff89\047" +
    "\uff89\050\uff89\051\uff89\053\uff89\054\uff89\055\uff89\056\uff89" +
    "\060\uff89\001\002\000\004\037\142\001\002\000\004\057" +
    "\143\001\002\000\060\023\uff7e\024\uff7e\025\uff7e\026\uff7e" +
    "\027\uff7e\030\uff7e\031\uff7e\035\uff7e\036\uff7e\037\uff7e\040" +
    "\uff7e\042\uff7e\044\uff7e\045\uff7e\046\uff7e\047\uff7e\050\uff7e" +
    "\051\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\060\uff7e\001" +
    "\002\000\054\023\uff93\024\uff93\025\uff93\026\uff93\030\uff93" +
    "\031\uff93\035\uff93\036\uff93\040\uff93\042\uff93\044\uff93\045" +
    "\uff93\046\uff93\047\uff93\050\uff93\051\uff93\053\uff93\054\uff93" +
    "\055\uff93\056\uff93\060\uff93\001\002\000\034\023\107\024" +
    "\116\025\110\026\102\030\146\044\115\045\114\046\105" +
    "\050\103\051\113\053\111\054\106\060\104\001\002\000" +
    "\060\023\uff85\024\uff85\025\uff85\026\uff85\027\uff85\030\uff85" +
    "\031\uff85\035\uff85\036\uff85\037\uff85\040\uff85\042\uff85\044" +
    "\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85\053\uff85" +
    "\054\uff85\055\uff85\056\uff85\060\uff85\001\002\000\054\023" +
    "\uff8f\024\uff8f\025\uff8f\026\uff8f\030\uff8f\031\uff8f\035\uff8f" +
    "\036\uff8f\040\uff8f\042\uff8f\044\uff8f\045\uff8f\046\uff8f\047" +
    "\uff8f\050\uff8f\051\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f" +
    "\060\uff8f\001\002\000\060\023\uff7d\024\uff7d\025\uff7d\026" +
    "\uff7d\027\uff7d\030\uff7d\031\uff7d\035\uff7d\036\uff7d\037\uff7d" +
    "\040\uff7d\042\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050" +
    "\uff7d\051\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\060\uff7d" +
    "\001\002\000\004\031\177\001\002\000\020\002\uff7b\027" +
    "\173\030\uff7b\031\uff7b\035\uff7b\036\uff7b\042\uff7b\001\002" +
    "\000\006\030\155\057\156\001\002\000\006\030\uff75\036" +
    "\167\001\002\000\022\002\uff77\027\uff77\030\uff77\031\uff77" +
    "\035\uff77\036\uff77\042\uff77\057\uff77\001\002\000\014\006" +
    "\uffb9\036\165\041\uffb9\043\uffb9\057\uffb9\001\002\000\004" +
    "\030\164\001\002\000\010\006\035\043\162\057\042\001" +
    "\002\000\006\030\uff73\036\uff73\001\002\000\006\006\035" +
    "\057\042\001\002\000\006\030\uff72\036\uff72\001\002\000" +
    "\022\002\uff76\027\uff76\030\uff76\031\uff76\035\uff76\036\uff76" +
    "\042\uff76\057\uff76\001\002\000\004\057\156\001\002\000" +
    "\012\006\uffb8\041\uffb8\043\uffb8\057\uffb8\001\002\000\004" +
    "\057\156\001\002\000\004\030\uff74\001\002\000\016\002" +
    "\uff7a\030\uff7a\031\uff7a\035\uff7a\036\uff7a\042\uff7a\001\002" +
    "\000\016\002\uff79\030\uff79\031\uff79\035\uff79\036\uff79\042" +
    "\uff79\001\002\000\010\006\035\030\155\057\175\001\002" +
    "\000\004\030\176\001\002\000\014\006\uffb9\030\uffa6\036" +
    "\165\043\uffb9\057\uffb9\001\002\000\016\002\uff78\030\uff78" +
    "\031\uff78\035\uff78\036\uff78\042\uff78\001\002\000\052\004" +
    "\221\006\053\013\224\014\026\015\212\017\206\021\216" +
    "\022\024\026\057\027\056\031\177\032\uff6e\037\060\044" +
    "\051\051\046\052\055\053\047\057\231\061\045\062\062" +
    "\001\002\000\062\002\uff7c\023\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\030\uff7c\031\uff7c\035\uff7c\036\uff7c\037\uff7c" +
    "\040\uff7c\042\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050" +
    "\uff7c\051\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\060\uff7c" +
    "\001\002\000\062\002\uff71\023\uff71\024\uff71\025\uff71\026" +
    "\uff71\027\uff71\030\uff71\031\uff71\035\uff71\036\uff71\037\uff71" +
    "\040\uff71\042\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050" +
    "\uff71\051\uff71\053\uff71\054\uff71\055\uff71\056\uff71\060\uff71" +
    "\001\002\000\060\004\uff60\005\uff60\006\uff60\007\uff60\013" +
    "\uff60\014\uff60\015\uff60\017\uff60\021\uff60\022\uff60\026\uff60" +
    "\027\uff60\031\uff60\032\uff60\035\011\037\uff60\044\uff60\051" +
    "\uff60\052\uff60\053\uff60\057\uff60\061\uff60\062\uff60\001\002" +
    "\000\006\031\uffeb\035\uffeb\001\002\000\060\004\uff60\005" +
    "\uff60\006\uff60\007\uff60\013\uff60\014\uff60\015\uff60\017\uff60" +
    "\021\uff60\022\uff60\026\uff60\027\uff60\031\uff60\032\uff60\035" +
    "\011\037\uff60\044\uff60\051\uff60\052\uff60\053\uff60\057\uff60" +
    "\061\uff60\062\uff60\001\002\000\060\004\uff60\005\uff60\006" +
    "\uff60\007\uff60\013\uff60\014\uff60\015\uff60\017\uff60\021\uff60" +
    "\022\uff60\026\uff60\027\uff60\031\uff60\032\uff60\035\011\037" +
    "\uff60\044\uff60\051\uff60\052\uff60\053\uff60\057\uff60\061\uff60" +
    "\062\uff60\001\002\000\034\006\053\026\057\027\056\031" +
    "\177\035\346\037\060\044\051\051\046\052\055\053\047" +
    "\057\231\061\045\062\062\001\002\000\004\035\345\001" +
    "\002\000\006\031\uffe9\035\uffe9\001\002\000\004\041\343" +
    "\001\002\000\030\006\053\026\057\027\056\037\060\044" +
    "\051\051\046\052\055\053\047\057\231\061\045\062\062" +
    "\001\002\000\006\031\uffea\035\uffea\001\002\000\050\023" +
    "\107\024\116\025\110\026\102\031\uffe7\035\uffe7\036\112" +
    "\042\uffb7\044\115\045\114\046\105\047\uffb7\050\103\051" +
    "\113\053\111\054\106\055\236\056\240\060\104\001\002" +
    "\000\056\004\221\005\uff6e\006\053\007\uff6e\013\224\014" +
    "\026\015\212\017\206\021\216\022\024\026\057\027\056" +
    "\031\177\032\uff6e\037\060\044\051\051\046\052\055\053" +
    "\047\057\231\061\045\062\062\001\002\000\032\006\053" +
    "\026\057\027\056\035\uffbc\037\060\044\051\051\046\052" +
    "\055\053\047\057\050\061\045\062\062\001\002\000\060" +
    "\004\uff60\005\uff60\006\uff60\007\uff60\013\uff60\014\uff60\015" +
    "\uff60\017\uff60\021\uff60\022\uff60\026\uff60\027\uff60\031\uff60" +
    "\032\uff60\035\011\037\uff60\044\uff60\051\uff60\052\uff60\053" +
    "\uff60\057\uff60\061\uff60\062\uff60\001\002\000\004\035\323" +
    "\001\002\000\004\035\uffba\001\002\000\026\025\274\026" +
    "\266\042\273\044\276\045\277\046\271\047\270\050\267" +
    "\053\275\054\272\001\002\000\004\035\265\001\002\000" +
    "\032\006\053\026\057\027\056\031\233\037\060\044\051" +
    "\051\046\052\055\053\047\057\231\061\045\062\062\001" +
    "\002\000\004\032\232\001\002\000\060\004\uffd4\005\uffd4" +
    "\006\uffd4\007\uffd4\013\uffd4\014\uffd4\015\uffd4\017\uffd4\021" +
    "\uffd4\022\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4\035\uffd4" +
    "\037\uffd4\044\uffd4\051\uffd4\052\uffd4\053\uffd4\057\uffd4\061" +
    "\uffd4\062\uffd4\001\002\000\056\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\013\ufff3\014\ufff3\015\ufff3\017\ufff3\021\ufff3\022" +
    "\ufff3\026\ufff3\027\ufff3\031\ufff3\032\ufff3\037\ufff3\044\ufff3" +
    "\051\ufff3\052\ufff3\053\ufff3\057\ufff3\061\ufff3\062\ufff3\001" +
    "\002\000\006\031\uffe8\035\uffe8\001\002\000\056\023\uff80" +
    "\024\uff80\025\uff80\026\uff80\027\uff80\031\uff80\035\uff80\036" +
    "\165\037\uff80\041\uffb9\042\uff80\044\uff80\045\uff80\046\uff80" +
    "\047\uff80\050\uff80\051\uff80\053\uff80\054\uff80\055\uff80\056" +
    "\uff80\060\uff80\001\002\000\122\002\uff70\004\uff70\005\uff70" +
    "\006\uff70\007\uff70\011\uff70\013\uff70\014\uff70\015\uff70\017" +
    "\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026\uff70" +
    "\027\uff70\030\uff70\031\uff70\032\uff70\035\uff70\036\uff70\037" +
    "\uff70\040\uff70\042\uff70\044\uff70\045\uff70\046\uff70\047\uff70" +
    "\050\uff70\051\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056" +
    "\uff70\057\uff70\060\uff70\061\uff70\062\uff70\001\002\000\010" +
    "\005\242\007\245\032\uffce\001\002\000\004\035\253\001" +
    "\002\000\050\023\107\024\116\025\110\026\102\031\237" +
    "\035\uffe7\036\112\042\uffb7\044\115\045\114\046\105\047" +
    "\uffb7\050\103\051\113\053\111\054\106\055\236\056\240" +
    "\060\104\001\002\000\006\031\uffe6\035\uffe6\001\002\000" +
    "\010\005\242\007\245\032\uffce\001\002\000\006\031\uffe5" +
    "\035\uffe5\001\002\000\010\005\242\007\245\032\uffce\001" +
    "\002\000\004\040\uffcb\001\002\000\004\040\250\001\002" +
    "\000\004\032\247\001\002\000\030\006\053\026\057\027" +
    "\056\037\060\044\051\051\046\052\055\053\047\057\050" +
    "\061\045\062\062\001\002\000\004\040\uffcc\001\002\000" +
    "\060\004\uffd1\005\uffd1\006\uffd1\007\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\017\uffd1\021\uffd1\022\uffd1\026\uffd1\027\uffd1\031" +
    "\uffd1\032\uffd1\035\uffd1\037\uffd1\044\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\057\uffd1\061\uffd1\062\uffd1\001\002\000\056\004" +
    "\221\005\uff6e\006\053\007\uff6e\013\224\014\026\015\212" +
    "\017\206\021\216\022\024\026\057\027\056\031\177\032" +
    "\uff6e\037\060\044\051\051\046\052\055\053\047\057\231" +
    "\061\045\062\062\001\002\000\010\005\uffcd\007\uffcd\032" +
    "\uffcd\001\002\000\004\032\uffcf\001\002\000\032\006\053" +
    "\026\057\027\056\031\254\037\060\044\051\051\046\052" +
    "\055\053\047\057\050\061\045\062\062\001\002\000\010" +
    "\005\242\007\245\032\uffce\001\002\000\034\023\107\024" +
    "\116\025\110\026\102\031\256\044\115\045\114\046\105" +
    "\050\103\051\113\053\111\054\106\060\104\001\002\000" +
    "\010\005\242\007\245\032\uffce\001\002\000\004\032\260" +
    "\001\002\000\060\004\uffd0\005\uffd0\006\uffd0\007\uffd0\013" +
    "\uffd0\014\uffd0\015\uffd0\017\uffd0\021\uffd0\022\uffd0\026\uffd0" +
    "\027\uffd0\031\uffd0\032\uffd0\035\uffd0\037\uffd0\044\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\057\uffd0\061\uffd0\062\uffd0\001\002" +
    "\000\004\032\262\001\002\000\060\004\uffd2\005\uffd2\006" +
    "\uffd2\007\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2\021\uffd2" +
    "\022\uffd2\026\uffd2\027\uffd2\031\uffd2\032\uffd2\035\uffd2\037" +
    "\uffd2\044\uffd2\051\uffd2\052\uffd2\053\uffd2\057\uffd2\061\uffd2" +
    "\062\uffd2\001\002\000\004\032\264\001\002\000\060\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\013\uffd3\014\uffd3\015\uffd3" +
    "\017\uffd3\021\uffd3\022\uffd3\026\uffd3\027\uffd3\031\uffd3\032" +
    "\uffd3\035\uffd3\037\uffd3\044\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\057\uffd3\061\uffd3\062\uffd3\001\002\000\056\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\013\ufff1\014\ufff1\015\ufff1\017\ufff1" +
    "\021\ufff1\022\ufff1\026\ufff1\027\ufff1\031\ufff1\032\ufff1\037" +
    "\ufff1\044\ufff1\051\ufff1\052\ufff1\053\ufff1\057\ufff1\061\ufff1" +
    "\062\ufff1\001\002\000\004\042\321\001\002\000\004\042" +
    "\317\001\002\000\004\042\315\001\002\000\004\042\313" +
    "\001\002\000\004\042\311\001\002\000\030\006\053\026" +
    "\057\027\056\037\060\044\051\051\046\052\055\053\047" +
    "\057\050\061\045\062\062\001\002\000\004\042\306\001" +
    "\002\000\004\042\304\001\002\000\004\042\302\001\002" +
    "\000\004\042\300\001\002\000\030\006\053\026\057\027" +
    "\056\037\060\044\051\051\046\052\055\053\047\057\050" +
    "\061\045\062\062\001\002\000\006\031\uffdf\035\uffdf\001" +
    "\002\000\030\006\053\026\057\027\056\037\060\044\051" +
    "\051\046\052\055\053\047\057\050\061\045\062\062\001" +
    "\002\000\006\031\uffe1\035\uffe1\001\002\000\030\006\053" +
    "\026\057\027\056\037\060\044\051\051\046\052\055\053" +
    "\047\057\050\061\045\062\062\001\002\000\006\031\uffdc" +
    "\035\uffdc\001\002\000\030\006\053\026\057\027\056\037" +
    "\060\044\051\051\046\052\055\053\047\057\050\061\045" +
    "\062\062\001\002\000\006\031\uffe4\035\uffe4\001\002\000" +
    "\006\031\uffdb\035\uffdb\001\002\000\030\006\053\026\057" +
    "\027\056\037\060\044\051\051\046\052\055\053\047\057" +
    "\050\061\045\062\062\001\002\000\006\031\uffdd\035\uffdd" +
    "\001\002\000\030\006\053\026\057\027\056\037\060\044" +
    "\051\051\046\052\055\053\047\057\050\061\045\062\062" +
    "\001\002\000\006\031\uffde\035\uffde\001\002\000\030\006" +
    "\053\026\057\027\056\037\060\044\051\051\046\052\055" +
    "\053\047\057\050\061\045\062\062\001\002\000\006\031" +
    "\uffe2\035\uffe2\001\002\000\030\006\053\026\057\027\056" +
    "\037\060\044\051\051\046\052\055\053\047\057\050\061" +
    "\045\062\062\001\002\000\006\031\uffe0\035\uffe0\001\002" +
    "\000\030\006\053\026\057\027\056\037\060\044\051\051" +
    "\046\052\055\053\047\057\050\061\045\062\062\001\002" +
    "\000\006\031\uffe3\035\uffe3\001\002\000\056\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0" +
    "\021\ufff0\022\ufff0\026\ufff0\027\ufff0\031\ufff0\032\ufff0\037" +
    "\ufff0\044\ufff0\051\ufff0\052\ufff0\053\ufff0\057\ufff0\061\ufff0" +
    "\062\ufff0\001\002\000\056\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\013\uffed\014\uffed\015\uffed\017\uffed\021\uffed\022\uffed" +
    "\026\uffed\027\uffed\031\uffed\032\uffed\037\uffed\044\uffed\051" +
    "\uffed\052\uffed\053\uffed\057\uffed\061\uffed\062\uffed\001\002" +
    "\000\004\035\uffbb\001\002\000\010\005\uff6f\007\uff6f\032" +
    "\uff6f\001\002\000\004\035\335\001\002\000\050\023\107" +
    "\024\116\025\110\026\102\031\177\035\uffe7\036\112\042" +
    "\uffb7\044\115\045\114\046\105\047\uffb7\050\103\051\113" +
    "\053\111\054\106\055\236\056\240\060\104\001\002\000" +
    "\062\004\uffda\005\uffda\006\uffda\007\uffda\011\332\013\uffda" +
    "\014\uffda\015\uffda\017\uffda\021\uffda\022\uffda\026\uffda\027" +
    "\uffda\031\uffda\032\uffda\035\uffda\037\uffda\044\uffda\051\uffda" +
    "\052\uffda\053\uffda\057\uffda\061\uffda\062\uffda\001\002\000" +
    "\006\015\212\031\177\001\002\000\060\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\013\uffd8\014\uffd8\015\uffd8\017\uffd8\021" +
    "\uffd8\022\uffd8\026\uffd8\027\uffd8\031\uffd8\032\uffd8\035\uffd8" +
    "\037\uffd8\044\uffd8\051\uffd8\052\uffd8\053\uffd8\057\uffd8\061" +
    "\uffd8\062\uffd8\001\002\000\060\004\uffd7\005\uffd7\006\uffd7" +
    "\007\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7\021\uffd7\022" +
    "\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\035\uffd7\037\uffd7" +
    "\044\uffd7\051\uffd7\052\uffd7\053\uffd7\057\uffd7\061\uffd7\062" +
    "\uffd7\001\002\000\030\006\053\026\057\027\056\037\060" +
    "\044\051\051\046\052\055\053\047\057\050\061\045\062" +
    "\062\001\002\000\034\023\107\024\116\025\110\026\102" +
    "\031\177\044\115\045\114\046\105\050\103\051\113\053" +
    "\111\054\106\060\104\001\002\000\062\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\011\340\013\uffd9\014\uffd9\015\uffd9\017" +
    "\uffd9\021\uffd9\022\uffd9\026\uffd9\027\uffd9\031\uffd9\032\uffd9" +
    "\035\uffd9\037\uffd9\044\uffd9\051\uffd9\052\uffd9\053\uffd9\057" +
    "\uffd9\061\uffd9\062\uffd9\001\002\000\006\015\212\031\177" +
    "\001\002\000\060\004\uffd6\005\uffd6\006\uffd6\007\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\017\uffd6\021\uffd6\022\uffd6\026\uffd6" +
    "\027\uffd6\031\uffd6\032\uffd6\035\uffd6\037\uffd6\044\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\057\uffd6\061\uffd6\062\uffd6\001\002" +
    "\000\060\004\uffd5\005\uffd5\006\uffd5\007\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\017\uffd5\021\uffd5\022\uffd5\026\uffd5\027\uffd5" +
    "\031\uffd5\032\uffd5\035\uffd5\037\uffd5\044\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\057\uffd5\061\uffd5\062\uffd5\001\002\000\030" +
    "\006\053\026\057\027\056\037\060\044\051\051\046\052" +
    "\055\053\047\057\050\061\045\062\062\001\002\000\036" +
    "\023\107\024\116\025\110\026\102\031\uff9c\035\uff9c\044" +
    "\115\045\114\046\105\050\103\051\113\053\111\054\106" +
    "\060\104\001\002\000\056\004\ufff2\005\ufff2\006\ufff2\007" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\017\ufff2\021\ufff2\022\ufff2" +
    "\026\ufff2\027\ufff2\031\ufff2\032\ufff2\037\ufff2\044\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\057\ufff2\061\ufff2\062\ufff2\001\002" +
    "\000\034\006\053\026\057\027\056\031\uff60\035\371\037" +
    "\060\044\051\051\046\052\055\053\047\057\050\061\045" +
    "\062\062\001\002\000\060\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\013\uffca\014\uffca\015\uffca\017\uffca\021\uffca\022\uffca" +
    "\026\uffca\027\uffca\031\uffca\032\uffca\035\uffca\037\uffca\044" +
    "\uffca\051\uffca\052\uffca\053\uffca\057\uffca\061\uffca\062\uffca" +
    "\001\002\000\004\035\uffbe\001\002\000\050\023\107\024" +
    "\116\025\110\026\102\031\uffbf\035\uffe7\036\112\042\uffb7" +
    "\044\115\045\114\046\105\047\uffb7\050\103\051\113\053" +
    "\111\054\106\055\236\056\240\060\104\001\002\000\004" +
    "\031\177\001\002\000\004\035\356\001\002\000\004\031" +
    "\177\001\002\000\060\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\013\uffc8\014\uffc8\015\uffc8\017\uffc8\021\uffc8\022\uffc8\026" +
    "\uffc8\027\uffc8\031\uffc8\032\uffc8\035\uffc8\037\uffc8\044\uffc8" +
    "\051\uffc8\052\uffc8\053\uffc8\057\uffc8\061\uffc8\062\uffc8\001" +
    "\002\000\034\006\053\026\057\027\056\031\uff60\035\357" +
    "\037\060\044\051\051\046\052\055\053\047\057\050\061" +
    "\045\062\062\001\002\000\032\006\053\026\057\027\056" +
    "\031\uff61\037\060\044\051\051\046\052\055\053\047\057" +
    "\231\061\045\062\062\001\002\000\004\031\uffc1\001\002" +
    "\000\036\023\107\024\116\025\110\026\102\031\uffbf\035" +
    "\uffbf\044\115\045\114\046\105\050\103\051\113\053\111" +
    "\054\106\060\104\001\002\000\006\031\uff60\035\363\001" +
    "\002\000\032\006\053\026\057\027\056\031\uff61\037\060" +
    "\044\051\051\046\052\055\053\047\057\231\061\045\062" +
    "\062\001\002\000\004\031\uffc4\001\002\000\004\031\uffc7" +
    "\001\002\000\004\031\uffbd\001\002\000\004\031\uffc5\001" +
    "\002\000\060\004\uffc9\005\uffc9\006\uffc9\007\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\017\uffc9\021\uffc9\022\uffc9\026\uffc9\027" +
    "\uffc9\031\uffc9\032\uffc9\035\uffc9\037\uffc9\044\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\057\uffc9\061\uffc9\062\uffc9\001\002\000" +
    "\032\006\053\026\057\027\056\031\uff61\037\060\044\051" +
    "\051\046\052\055\053\047\057\231\061\045\062\062\001" +
    "\002\000\004\031\uffc0\001\002\000\006\031\uff60\035\374" +
    "\001\002\000\032\006\053\026\057\027\056\031\uff61\037" +
    "\060\044\051\051\046\052\055\053\047\057\231\061\045" +
    "\062\062\001\002\000\004\031\uffc2\001\002\000\004\031" +
    "\uffc6\001\002\000\004\031\uffc3\001\002\000\056\004\uffef" +
    "\005\uffef\006\uffef\007\uffef\013\uffef\014\uffef\015\uffef\017" +
    "\uffef\021\uffef\022\uffef\026\uffef\027\uffef\031\uffef\032\uffef" +
    "\037\uffef\044\uffef\051\uffef\052\uffef\053\uffef\057\uffef\061" +
    "\uffef\062\uffef\001\002\000\056\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\013\uffec\014\uffec\015\uffec\017\uffec\021\uffec\022" +
    "\uffec\026\uffec\027\uffec\031\uffec\032\uffec\037\uffec\044\uffec" +
    "\051\uffec\052\uffec\053\uffec\057\uffec\061\uffec\062\uffec\001" +
    "\002\000\056\004\uffee\005\uffee\006\uffee\007\uffee\013\uffee" +
    "\014\uffee\015\uffee\017\uffee\021\uffee\022\uffee\026\uffee\027" +
    "\uffee\031\uffee\032\uffee\037\uffee\044\uffee\051\uffee\052\uffee" +
    "\053\uffee\057\uffee\061\uffee\062\uffee\001\002\000\054\023" +
    "\uff91\024\uff91\025\uff91\026\uff91\030\uff91\031\uff91\035\uff91" +
    "\036\uff91\040\uff91\042\uff91\044\uff91\045\uff91\046\uff91\047" +
    "\uff91\050\uff91\051\uff91\053\uff91\054\uff91\055\uff91\056\uff91" +
    "\060\uff91\001\002\000\054\023\uff90\024\uff90\025\uff90\026" +
    "\uff90\030\uff90\031\uff90\035\uff90\036\uff90\040\uff90\042\uff90" +
    "\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\053" +
    "\uff90\054\uff90\055\uff90\056\uff90\060\uff90\001\002\000\054" +
    "\023\uff92\024\uff92\025\uff92\026\uff92\030\uff92\031\uff92\035" +
    "\uff92\036\uff92\040\uff92\042\uff92\044\uff92\045\uff92\046\uff92" +
    "\047\uff92\050\uff92\051\uff92\053\uff92\054\uff92\055\uff92\056" +
    "\uff92\060\uff92\001\002\000\036\023\107\024\116\025\110" +
    "\026\102\030\ufff5\035\ufff5\044\115\045\114\046\105\050" +
    "\103\051\113\053\111\054\106\060\104\001\002\000\012" +
    "\030\uffa4\035\uffa4\036\uffa4\042\uffa4\001\002\000\060\002" +
    "\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\013\ufffb\014\ufffb" +
    "\015\ufffb\017\ufffb\021\ufffb\022\ufffb\026\ufffb\027\ufffb\031" +
    "\ufffb\032\ufffb\037\ufffb\044\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\057\ufffb\061\ufffb\062\ufffb\001\002\000\010\006\035\042" +
    "\u0112\057\042\001\002\000\006\030\uffa0\057\u0109\001\002" +
    "\000\004\035\uffa3\001\002\000\004\030\u0110\001\002\000" +
    "\004\035\u010e\001\002\000\006\030\uffa0\057\u0109\001\002" +
    "\000\004\030\uffa1\001\002\000\004\035\uffa2\001\002\000" +
    "\006\035\uff9e\042\u0114\001\002\000\030\006\053\026\057" +
    "\027\056\037\060\044\051\051\046\052\055\053\047\057" +
    "\050\061\045\062\062\001\002\000\034\023\107\024\116" +
    "\025\110\026\102\035\uff9f\044\115\045\114\046\105\050" +
    "\103\051\113\053\111\054\106\060\104\001\002\000\030" +
    "\006\053\026\057\027\056\037\060\044\051\051\046\052" +
    "\055\053\047\057\050\061\045\062\062\001\002\000\034" +
    "\023\107\024\116\025\110\026\102\035\uff9d\044\115\045" +
    "\114\046\105\050\103\051\113\053\111\054\106\060\104" +
    "\001\002\000\004\002\ufffc\001\002\000\004\002\ufffd\001" +
    "\002\000\004\027\uff99\001\002\000\004\057\uff96\001\002" +
    "\000\004\027\153\001\002\000\004\057\u011d\001\002\000" +
    "\004\027\153\001\002\000\004\027\uff95\001\002\000\006" +
    "\002\uff98\035\uff98\001\002\000\010\002\uff97\031\177\035" +
    "\uff97\001\002\000\006\002\uff9b\035\uff9b\001\002\000\010" +
    "\002\uff9a\031\177\035\uff9a\001\002\000\060\002\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\017\ufffa\021\ufffa\022\ufffa\026\ufffa\027\ufffa\031\ufffa\032" +
    "\ufffa\037\ufffa\044\ufffa\051\ufffa\052\ufffa\053\ufffa\057\ufffa" +
    "\061\ufffa\062\ufffa\001\002\000\014\002\uff6b\006\uff6b\014" +
    "\uff6b\020\013\022\uff6b\001\002\000\012\002\uff6c\006\uff6c" +
    "\014\uff6c\022\uff6c\001\002\000\004\061\u0128\001\002\000" +
    "\026\002\uff66\006\uff66\014\uff66\020\uff66\022\uff66\030\uff66" +
    "\035\uff66\037\uff66\057\uff66\061\uff66\001\002\000\016\002" +
    "\uff6a\006\uff6a\014\uff6a\020\uff6a\022\uff6a\035\uff6a\001\002" +
    "\000\026\002\uff63\006\uff63\014\uff63\020\uff63\022\uff63\030" +
    "\uff63\035\uff63\037\uff63\057\uff63\061\uff63\001\002\000\012" +
    "\030\uff67\037\u012a\057\010\061\u0128\001\002\000\004\061" +
    "\u0128\001\002\000\026\002\uff65\006\uff65\014\uff65\020\uff65" +
    "\022\uff65\030\uff65\035\uff65\037\uff65\057\uff65\061\uff65\001" +
    "\002\000\004\030\u0130\001\002\000\014\030\uff60\035\011" +
    "\037\uff60\057\uff60\061\uff60\001\002\000\012\030\uff67\037" +
    "\u012a\057\010\061\u0128\001\002\000\004\030\uff68\001\002" +
    "\000\016\002\uff69\006\uff69\014\uff69\020\uff69\022\uff69\035" +
    "\uff69\001\002\000\026\002\uff64\006\uff64\014\uff64\020\uff64" +
    "\022\uff64\030\uff64\035\uff64\037\uff64\057\uff64\061\uff64\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0130\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\013\011\001\001\000\004\007\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\014\005\013\001\001\000\010\007\u0124\011\u0126" +
    "\012\u0125\001\001\000\004\013\u0122\001\001\000\016\006" +
    "\020\014\017\015\021\016\022\017\024\020\015\001\001" +
    "\000\002\001\001\000\010\041\u0118\057\u0119\061\u011a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0116" +
    "\001\001\000\004\013\u0115\001\001\000\004\055\u010a\001" +
    "\001\000\002\001\001\000\004\021\026\001\001\000\002" +
    "\001\001\000\012\043\040\051\035\052\036\053\042\001" +
    "\001\000\004\021\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\u0106\041\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\024\062" +
    "\025\067\026\064\031\060\032\063\033\053\034\066\035" +
    "\065\103\u0105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\024\062\025\067\026\064\031" +
    "\060\032\063\033\053\034\066\035\065\103\051\001\001" +
    "\000\002\001\001\000\022\024\062\025\u0104\026\064\031" +
    "\060\032\063\033\053\034\066\035\065\001\001\000\022" +
    "\024\062\025\u0103\026\064\031\060\032\063\033\053\034" +
    "\066\035\065\001\001\000\002\001\001\000\022\024\062" +
    "\025\u0102\026\064\031\060\032\063\033\053\034\066\035" +
    "\065\001\001\000\002\001\001\000\010\036\147\037\150" +
    "\041\151\001\001\000\002\001\001\000\022\024\062\025" +
    "\146\026\064\031\060\032\063\033\053\034\066\035\065" +
    "\001\001\000\024\024\062\025\067\026\064\031\060\032" +
    "\063\033\053\034\066\035\065\103\144\001\001\000\022" +
    "\024\062\025\143\026\064\031\060\032\063\033\053\034" +
    "\066\035\065\001\001\000\004\007\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\027\070\030\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\023\076\024\062\025\067\026\064" +
    "\031\060\032\063\033\053\034\066\035\065\103\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\043\133\051\035\052\036\053" +
    "\042\001\001\000\002\001\001\000\024\024\062\025\067" +
    "\026\064\031\060\032\063\033\053\034\066\035\065\103" +
    "\132\001\001\000\024\024\062\025\067\026\064\031\060" +
    "\032\063\033\053\034\066\035\065\103\131\001\001\000" +
    "\024\024\062\025\067\026\064\031\060\032\063\033\053" +
    "\034\066\035\065\103\130\001\001\000\024\024\062\025" +
    "\067\026\064\031\060\032\063\033\053\034\066\035\065" +
    "\103\127\001\001\000\024\024\062\025\067\026\064\031" +
    "\060\032\063\033\053\034\066\035\065\103\126\001\001" +
    "\000\024\024\062\025\067\026\064\031\060\032\063\033" +
    "\053\034\066\035\065\103\125\001\001\000\024\024\062" +
    "\025\067\026\064\031\060\032\063\033\053\034\066\035" +
    "\065\103\124\001\001\000\024\024\062\025\067\026\064" +
    "\031\060\032\063\033\053\034\066\035\065\103\123\001" +
    "\001\000\026\023\122\024\062\025\067\026\064\031\060" +
    "\032\063\033\053\034\066\035\065\103\100\001\001\000" +
    "\024\024\062\025\067\026\064\031\060\032\063\033\053" +
    "\034\066\035\065\103\121\001\001\000\024\024\062\025" +
    "\067\026\064\031\060\032\063\033\053\034\066\035\065" +
    "\103\120\001\001\000\024\024\062\025\067\026\064\031" +
    "\060\032\063\033\053\034\066\035\065\103\117\001\001" +
    "\000\024\024\062\025\067\026\064\031\060\032\063\033" +
    "\053\034\066\035\065\103\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\023\135\024\062\025\067\026\064\031\060\032" +
    "\063\033\053\034\066\035\065\103\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\040\177\046\200\001\001\000\006" +
    "\041\171\042\170\001\001\000\010\022\157\044\156\045" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\043\160\051\035\052" +
    "\036\053\042\001\001\000\002\001\001\000\012\043\162" +
    "\051\035\052\036\053\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\165\001\001\000\002\001\001" +
    "\000\010\022\157\044\167\045\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\022\157" +
    "\043\173\044\156\045\153\051\035\052\036\053\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\072\014\226\017\024\020\015\022\210\023\221\024" +
    "\062\025\067\026\064\031\060\032\063\033\053\034\066" +
    "\035\065\046\204\047\224\050\214\056\227\062\206\063" +
    "\222\064\217\065\201\066\216\067\203\070\202\071\212" +
    "\072\207\073\225\103\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0101\001\001\000\002\001\001" +
    "\000\004\013\u0100\001\001\000\004\013\377\001\001\000" +
    "\052\022\210\023\221\024\062\025\067\026\064\031\060" +
    "\032\063\033\053\034\066\035\065\046\346\056\227\062" +
    "\347\070\202\071\212\072\207\074\352\076\351\077\353" +
    "\103\350\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\022\210\023\221\024\062\025\067" +
    "\026\064\031\060\032\063\033\053\034\066\035\065\056" +
    "\227\062\326\070\202\071\212\072\207\103\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\014\226\017" +
    "\024\020\015\022\210\023\221\024\062\025\067\026\064" +
    "\031\060\032\063\033\053\034\066\035\065\046\204\047" +
    "\325\050\214\056\227\062\206\063\222\064\217\065\201" +
    "\066\216\067\203\070\202\071\212\072\207\073\225\103" +
    "\213\001\001\000\026\023\324\024\062\025\067\026\064" +
    "\031\060\032\063\033\053\034\066\035\065\103\100\001" +
    "\001\000\004\013\323\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\022" +
    "\210\023\221\024\062\025\067\026\064\031\060\032\063" +
    "\033\053\034\066\035\065\056\227\062\233\070\202\071" +
    "\212\072\207\103\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\100\262\101\240\102\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\100\243\101\240\102\242\001\001\000\002" +
    "\001\001\000\010\100\251\101\240\102\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\023\245\024\062\025\067\026\064\031\060\032\063\033" +
    "\053\034\066\035\065\103\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\014\226\017\024\020\015\022" +
    "\210\023\221\024\062\025\067\026\064\031\060\032\063" +
    "\033\053\034\066\035\065\046\204\047\250\050\214\056" +
    "\227\062\206\063\222\064\217\065\201\066\216\067\203" +
    "\070\202\071\212\072\207\073\225\103\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\024\062\025\067" +
    "\026\064\031\060\032\063\033\053\034\066\035\065\103" +
    "\254\001\001\000\010\100\260\101\240\102\242\001\001" +
    "\000\002\001\001\000\010\100\256\101\240\102\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\023" +
    "\307\024\062\025\067\026\064\031\060\032\063\033\053" +
    "\034\066\035\065\103\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\023\300\024\062\025\067\026\064\031\060\032\063\033" +
    "\053\034\066\035\065\103\100\001\001\000\002\001\001" +
    "\000\026\023\302\024\062\025\067\026\064\031\060\032" +
    "\063\033\053\034\066\035\065\103\100\001\001\000\002" +
    "\001\001\000\026\023\304\024\062\025\067\026\064\031" +
    "\060\032\063\033\053\034\066\035\065\103\100\001\001" +
    "\000\002\001\001\000\026\023\306\024\062\025\067\026" +
    "\064\031\060\032\063\033\053\034\066\035\065\103\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\023" +
    "\311\024\062\025\067\026\064\031\060\032\063\033\053" +
    "\034\066\035\065\103\100\001\001\000\002\001\001\000" +
    "\026\023\313\024\062\025\067\026\064\031\060\032\063" +
    "\033\053\034\066\035\065\103\100\001\001\000\002\001" +
    "\001\000\026\023\315\024\062\025\067\026\064\031\060" +
    "\032\063\033\053\034\066\035\065\103\100\001\001\000" +
    "\002\001\001\000\026\023\317\024\062\025\067\026\064" +
    "\031\060\032\063\033\053\034\066\035\065\103\100\001" +
    "\001\000\002\001\001\000\026\023\321\024\062\025\067" +
    "\026\064\031\060\032\063\033\053\034\066\035\065\103" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\330\001\001\000\002\001\001\000\006" +
    "\046\333\065\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\024\062\025\067\026\064\031\060\032\063" +
    "\033\053\034\066\035\065\103\335\001\001\000\004\046" +
    "\336\001\001\000\002\001\001\000\006\046\341\065\340" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\024" +
    "\062\025\067\026\064\031\060\032\063\033\053\034\066" +
    "\035\065\103\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\013\371\024\062\025\067\026\064\031\060" +
    "\032\063\033\053\034\066\035\065\076\372\103\360\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\367\001\001\000\002\001\001\000\004\046" +
    "\354\001\001\000\002\001\001\000\030\013\357\024\062" +
    "\025\067\026\064\031\060\032\063\033\053\034\066\035" +
    "\065\076\361\103\360\001\001\000\044\022\210\023\221" +
    "\024\062\025\067\026\064\031\060\032\063\033\053\034" +
    "\066\035\065\056\227\062\365\070\202\071\212\072\207" +
    "\075\366\103\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\363\001\001\000\044\022\210\023\221" +
    "\024\062\025\067\026\064\031\060\032\063\033\053\034" +
    "\066\035\065\056\227\062\365\070\202\071\212\072\207" +
    "\075\364\103\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\022\210\023\221\024\062\025\067\026\064\031" +
    "\060\032\063\033\053\034\066\035\065\056\227\062\365" +
    "\070\202\071\212\072\207\075\376\103\213\001\001\000" +
    "\002\001\001\000\004\013\374\001\001\000\044\022\210" +
    "\023\221\024\062\025\067\026\064\031\060\032\063\033" +
    "\053\034\066\035\065\056\227\062\365\070\202\071\212" +
    "\072\207\075\375\103\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\043\u0110\051\035\052\036\053" +
    "\042\001\001\000\006\054\u010b\055\u010c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\054" +
    "\u010e\055\u010c\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\024\062\025\067\026\064\031" +
    "\060\032\063\033\053\034\066\035\065\103\u0112\001\001" +
    "\000\002\001\001\000\024\024\062\025\067\026\064\031" +
    "\060\032\063\033\053\034\066\035\065\103\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\036\u011f\037\u0120" +
    "\041\151\001\001\000\004\060\u011b\001\001\000\010\036" +
    "\u011d\037\u011e\041\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\040\177\046\200\001\001\000\002\001" +
    "\001\000\006\040\177\046\200\001\001\000\002\001\001" +
    "\000\006\004\u0123\005\013\001\001\000\002\001\001\000" +
    "\004\012\u0130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\u0124\010\u012b\011\u012c\012" +
    "\u0125\001\001\000\004\012\u012a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u012d\001\001\000\012\007" +
    "\u0124\010\u012e\011\u012c\012\u0125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sourceFile EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sourceFile ::= packageClause optionalSemiColon importDecls topLevelDecl 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = a+b+c+d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // sourceFile ::= packageClause optionalSemiColon importDecls 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = a+b+c;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // topLevelDecl ::= declaration 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = d;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // topLevelDecl ::= functionDecl optionalSemiColon 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = d+o;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // topLevelDecl ::= methodDecl optionalSemiColon 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = m+o;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= constDecl SEMI_COLON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = c+";";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= varDecl SEMI_COLON 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = v+";";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constDecl ::= CONST constSpec 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = "const"+ c;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constDecl ::= CONST OPEN_PARAN constSpec CLOSE_PARAN 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = "const"+"("+c+")";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constDecl ::= CONST OPEN_PARAN CLOSE_PARAN 
            {
              String RESULT =null;
		
				RESULT = "const"+ "("+")";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constSpec ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constSpec ::= IDENTIFIER EQUAL expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i+"="+e.code;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constSpec ::= IDENTIFIER type EQUAL expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i+t+"="+e.code;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement ::= declaration 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= simpleStmt SEMI_COLON 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = s+";";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= returnStmt SEMI_COLON 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = r+";";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= breakStmt SEMI_COLON 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = b+";";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= block optionalSemiColon 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = b+o;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= ifStmt optionalSemiColon 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i+o;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= switchStmt optionalSemiColon 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = s+o;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= forStmt optionalSemiColon 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = f+o;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simpleStmt ::= expressionStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simpleStmt ::= incDecStmt 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simpleStmt ::= assignment 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // simpleStmt ::= shortVarDecl 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expressionStmt ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = e.code;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionStmt",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // incDecStmt ::= expression INCREMENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e.code+"++";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incDecStmt",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // incDecStmt ::= expression DECREMENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e.code+"--";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incDecStmt",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // assignment ::= expressionList PLUS EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e1+"+"+"="+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assignment ::= expressionList MINUS EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e1+"-"+"="+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assignment ::= expressionList BAR EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e1+"|"+"="+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assignment ::= expressionList ASTRISK EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e1+"*"+"="+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignment ::= expressionList SLASH EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e1+"/"+"="+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignment ::= expressionList SHIFT_LEFT EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e1+"<<"+"="+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assignment ::= expressionList SHIFT_RIGHT EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e1+">>"+"="+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment ::= expressionList PERCENT EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e1+"%"+"="+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignment ::= expressionList AMBERSAND EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e1+"&"+"="+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignment ::= expressionList EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e1+"="+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ifStmt ::= IF expression block 
            {
              String RESULT =null;
		
			RESULT = "";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifStmt ::= IF simpleStmt SEMI_COLON expression block 
            {
              String RESULT =null;
		
			RESULT = "";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifStmt ::= IF expression block ELSE ifStmt 
            {
              String RESULT =null;
		
			RESULT = "";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ifStmt ::= IF expression block ELSE block 
            {
              String RESULT =null;
		
			RESULT = "";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ifStmt ::= IF simpleStmt SEMI_COLON expression block ELSE ifStmt 
            {
              String RESULT =null;
		
			RESULT = "";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ifStmt ::= IF simpleStmt SEMI_COLON expression block ELSE block 
            {
              String RESULT =null;
		
			RESULT = "";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // switchStmt ::= exprSwitchStmt 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchStmt",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprSwitchStmt ::= SWITCH OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprSwitchStmt ::= SWITCH simpleStmt SEMI_COLON OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprSwitchStmt ::= SWITCH expression OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprSwitchStmt ::= SWITCH simpleStmt SEMI_COLON expression OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exprCaseClauses ::= exprCaseClause exprCaseClauses 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClauses",62, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exprCaseClauses ::= 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClauses",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exprCaseClause ::= exprSwitchCase COLON statementList 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClause",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exprSwitchCase ::= CASE expressionList 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchCase",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exprSwitchCase ::= DEFAULT 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchCase",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // forStmt ::= FOR block 
            {
              String RESULT =null;
		
			RESULT = "";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // forStmt ::= FOR condition block 
            {
              String RESULT =null;
		
			RESULT = "";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // forStmt ::= FOR forClause block 
            {
              String RESULT =null;
		
			RESULT = "";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // forClause ::= initStmt SEMI_COLON condition SEMI_COLON postStmt 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // forClause ::= SEMI_COLON condition SEMI_COLON postStmt 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // forClause ::= initStmt SEMI_COLON SEMI_COLON postStmt 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // forClause ::= initStmt SEMI_COLON condition optionalSemiColon 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // forClause ::= SEMI_COLON SEMI_COLON postStmt 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // forClause ::= SEMI_COLON condition optionalSemiColon 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // forClause ::= initStmt SEMI_COLON optionalSemiColon 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // forClause ::= SEMI_COLON optionalSemiColon 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",61, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // condition ::= expression 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // initStmt ::= simpleStmt 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initStmt",58, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // postStmt ::= simpleStmt 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postStmt",59, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // returnStmt ::= RETURN 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // returnStmt ::= RETURN expressionList 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // breakStmt ::= BREAK 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakStmt",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // identifierList ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // identifierList ::= IDENTIFIER COMMA identifierList 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i+c+l;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expressionList ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = e.code;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expressionList ::= expression COMMA expressionList 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = e+":"+l;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= unaryExpr 
            {
              Express RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT  =  new Express();
				// RESULT.code  = u ;
				// Express x  =  new Express();
				// x.setCode(u);
				// RESULT=x;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression REL_OP expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,r,b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address + r + b.address;
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression OR_OP expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"||",b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address+"||"+b.address;
				RESULT.address = Express.Temp();

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression AND_OP expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"&&",b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address+"&&"+b.address;
				RESULT.address = Express.Temp();

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= expression PLUS expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"+",b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address+"+"+b.address;
				RESULT.address = Express.Temp();

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= expression MINUS expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"-",b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address+"-"+b.address;
				RESULT.address = Express.Temp();

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= expression ASTRISK expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"*",b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address+"*"+b.address;
				RESULT.address = Express.Temp();

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= expression SLASH expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"/",b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address+"/"+b.address;
				RESULT.address = Express.Temp();

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= expression PERCENT expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"%",b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address+"%"+b.address;
				RESULT.address = Express.Temp();

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression ::= expression SHIFT_LEFT expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"<<",b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address+"<<"+b.address;
				RESULT.address = Express.Temp();

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= expression SHIFT_RIGHT expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,">>",b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address+">>"+b.address;
				RESULT.address = Express.Temp();

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expression AMBERSAND expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"&",b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address+"&"+b.address;
				RESULT.address = Express.Temp();

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression ::= expression EXCLAMATION expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"!",b);
				// RESULT  =  new Express();
				// RESULT.code = a.code+""+b.code+RESULT.address+"="+a.address+"!"+b.address;
				RESULT.address = Express.Temp();

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type ::= typeName 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = a;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type ::= typeLit 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = b;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // typeName ::= IDENTIFIER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeName",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // typeLit ::= functionType 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = f;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeLit",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // functionType ::= FUNC signature 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT =  s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionType",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // varDecl ::= VAR varSpec 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = v;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // varDecl ::= VAR OPEN_PARAN varSpecs CLOSE_PARAN 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = v;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // varSpecs ::= varSpec SEMI_COLON varSpecs 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpecs",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // varSpecs ::= 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpecs",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // varSpec ::= IDENTIFIER EQUAL expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = i+"="+e.code;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // varSpec ::= IDENTIFIER type 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = i+t;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // varSpec ::= IDENTIFIER type EQUAL expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = i+t+"="+e.code;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // shortVarDecl ::= identifierList COLON_EQUAL expression 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shortVarDecl",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // functionDecl ::= FUNC functionName function 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = n+f;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // functionDecl ::= FUNC functionName signature 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = n+s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // functionName ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionName",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // methodDecl ::= FUNC receiver methodName function 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // methodDecl ::= FUNC receiver methodName signature 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // receiver ::= parameters 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = p;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // methodName ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodName",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // unaryExpr ::= primaryExpr 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // unaryExpr ::= MINUS unaryExpr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				// RESULT  =  new Express();
				// RESULT.address = Express.Temp();
				// RESULT.code = b.code+""+RESULT.address+"="+"-"+b.address;
				// RESULT ="kkk";
				RESULT ="-"+b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // unaryExpr ::= EXCLAMATION unaryExpr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT ="!"+b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // unaryExpr ::= ASTRISK unaryExpr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT ="*"+b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // unaryExpr ::= AMBERSAND unaryExpr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT ="&"+b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // unaryExpr ::= LESS_DASH unaryExpr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT ="<-"+b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // primaryExpr ::= operand 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = o;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // primaryExpr ::= primaryExpr selector 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = p+s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // primaryExpr ::= primaryExpr arguments 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = p+a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // selector ::= DOT IDENTIFIER 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // arguments ::= OPEN_PARAN CLOSE_PARAN 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // arguments ::= OPEN_PARAN expressionList CLOSE_PARAN 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // arguments ::= OPEN_PARAN TYPE type COMMA expressionList CLOSE_PARAN 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operand ::= literal 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = l;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operand ::= operandName 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = o;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operand ::= OPEN_PARAN expression CLOSE_PARAN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = "("+ e.code + ")";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // literal ::= basicLit 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = b;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // literal ::= functionLit 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = f;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // basicLit ::= INT_LIT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = ""+i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basicLit",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // basicLit ::= STRING_LIT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basicLit",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // operandName ::= IDENTIFIER 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandName",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // operandName ::= qualifiedIdent 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandName",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // qualifiedIdent ::= DOT packageName DOT IDENTIFIER 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualifiedIdent",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // functionLit ::= FUNC function 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = f;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionLit",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // function ::= signature functionBody 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = s+f;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // signature ::= parameters 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = p;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // signature ::= parameters result 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = p+r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // result ::= parameters 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = s;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // result ::= OPEN_PARAN type CLOSE_PARAN 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = "(" + b + ")";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // parameters ::= OPEN_PARAN CLOSE_PARAN 
            {
              String RESULT =null;
		
				RESULT = "("+")";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // parameters ::= OPEN_PARAN parameterList CLOSE_PARAN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = "("+p+")";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // parameterList ::= parameterDecl 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = p;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // parameterList ::= parameterDecl COMMA parameterList 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = p+","+l;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // parameterDecl ::= identifierList type 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i+t;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDecl",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // parameterDecl ::= identifierList CDOTS type 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i+"..."+t;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDecl",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // functionBody ::= block 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = b;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionBody",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // block ::= OPEN_CURLY statementList CLOSE_CURLY 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = "{"+s+"}";
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // statementList ::= statement statementList 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = s+l;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // statementList ::= 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // packageClause ::= PACKAGE packageName 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = a;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageClause",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // importDecls ::= importDecl optionalSemiColon importDecls 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // importDecls ::= 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // importDecl ::= IMPORT importSpec 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // importDecl ::= IMPORT OPEN_PARAN importSpecs CLOSE_PARAN 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // importSpecs ::= importSpec optionalSemiColon importSpecs 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpecs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // importSpecs ::= 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpecs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // importSpec ::= importPath 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // importSpec ::= DOT importPath 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // importSpec ::= packageName importPath 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // importPath ::= STRING_LIT 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importPath",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // packageName ::= IDENTIFIER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageName",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // optionalSemiColon ::= SEMI_COLON 
            {
              String RESULT =null;
		
						RESULT = ";";
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemiColon",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // optionalSemiColon ::= 
            {
              String RESULT =null;
		
						RESULT = "";
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemiColon",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
