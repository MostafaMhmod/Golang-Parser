
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\002\006\000\002\007" +
    "\004\000\002\007\002\000\002\006\003\000\002\006\004" +
    "\000\002\006\004\000\002\015\004\000\002\015\004\000" +
    "\002\020\004\000\002\020\006\000\002\020\005\000\002" +
    "\023\005\000\002\023\004\000\002\022\003\000\002\022" +
    "\005\000\002\022\006\000\002\052\003\000\002\052\004" +
    "\000\002\052\004\000\002\052\004\000\002\052\004\000" +
    "\002\052\004\000\002\052\004\000\002\052\004\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\072\003\000\002\073\004\000\002\073\004" +
    "\000\002\074\006\000\002\074\006\000\002\074\006\000" +
    "\002\074\006\000\002\074\006\000\002\074\006\000\002" +
    "\074\005\000\002\067\005\000\002\067\007\000\002\067" +
    "\007\000\002\067\007\000\002\067\011\000\002\067\011" +
    "\000\002\070\003\000\002\075\006\000\002\075\010\000" +
    "\002\075\007\000\002\075\011\000\002\102\004\000\002" +
    "\102\002\000\002\103\005\000\002\104\004\000\002\104" +
    "\003\000\002\071\005\000\002\101\007\000\002\100\003" +
    "\000\002\076\003\000\002\077\003\000\002\065\003\000" +
    "\002\065\004\000\002\066\003\000\002\024\003\000\002" +
    "\024\005\000\002\025\003\000\002\025\005\000\002\105" +
    "\003\000\002\105\005\000\002\105\005\000\002\105\005" +
    "\000\002\105\005\000\002\105\005\000\002\105\005\000" +
    "\002\105\005\000\002\105\005\000\002\105\005\000\002" +
    "\105\005\000\002\105\005\000\002\105\005\000\002\045" +
    "\003\000\002\045\003\000\002\053\003\000\002\054\003" +
    "\000\002\055\004\000\002\021\004\000\002\021\006\000" +
    "\002\057\005\000\002\057\002\000\002\056\005\000\002" +
    "\056\004\000\002\056\006\000\002\060\005\000\002\016" +
    "\005\000\002\016\005\000\002\061\003\000\002\017\006" +
    "\000\002\017\006\000\002\063\003\000\002\062\003\000" +
    "\002\027\003\000\002\027\004\000\002\027\004\000\002" +
    "\027\004\000\002\027\004\000\002\027\004\000\002\026" +
    "\003\000\002\026\004\000\002\026\004\000\002\031\004" +
    "\000\002\032\004\000\002\032\005\000\002\030\003\000" +
    "\002\030\003\000\002\030\005\000\002\033\003\000\002" +
    "\033\003\000\002\035\003\000\002\035\003\000\002\034" +
    "\003\000\002\034\003\000\002\037\006\000\002\036\004" +
    "\000\002\040\004\000\002\041\003\000\002\041\004\000" +
    "\002\044\003\000\002\044\005\000\002\043\004\000\002" +
    "\043\005\000\002\046\003\000\002\046\005\000\002\047" +
    "\004\000\002\047\005\000\002\042\003\000\002\050\005" +
    "\000\002\051\004\000\002\051\002\000\002\003\004\000" +
    "\002\004\005\000\002\004\002\000\002\005\004\000\002" +
    "\005\006\000\002\011\005\000\002\011\002\000\002\012" +
    "\003\000\002\012\004\000\002\012\004\000\002\013\003" +
    "\000\002\010\003\000\002\014\003\000\002\014\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\004\012\005\001\002\000\004\002\u0119\001" +
    "\002\000\004\057\137\001\002\000\016\002\uff6a\006\uff6a" +
    "\014\uff6a\020\uff6a\022\uff6a\035\007\001\002\000\064\002" +
    "\uff6b\004\uff6b\005\uff6b\006\uff6b\007\uff6b\013\uff6b\014\uff6b" +
    "\015\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\026\uff6b\027" +
    "\uff6b\030\uff6b\031\uff6b\032\uff6b\037\uff6b\044\uff6b\051\uff6b" +
    "\052\uff6b\053\uff6b\057\uff6b\061\uff6b\062\uff6b\001\002\000" +
    "\014\002\uff75\006\uff75\014\uff75\020\011\022\uff75\001\002" +
    "\000\012\027\u010f\037\u0110\057\137\061\u010e\001\002\000" +
    "\016\002\uff6a\006\uff6a\014\uff6a\020\uff6a\022\uff6a\035\007" +
    "\001\002\000\012\002\ufffe\006\015\014\025\022\022\001" +
    "\002\000\004\035\u0108\001\002\000\006\027\151\057\376" +
    "\001\002\000\012\002\ufffd\006\ufffd\014\ufffd\022\ufffd\001" +
    "\002\000\012\002\ufffe\006\015\014\025\022\022\001\002" +
    "\000\014\002\uff6a\006\uff6a\014\uff6a\022\uff6a\035\007\001" +
    "\002\000\014\002\uff6a\006\uff6a\014\uff6a\022\uff6a\035\007" +
    "\001\002\000\006\027\357\057\356\001\002\000\004\002" +
    "\000\001\002\000\004\035\355\001\002\000\006\027\030" +
    "\057\027\001\002\000\004\035\ufff8\001\002\000\012\006" +
    "\037\035\ufff3\042\042\057\044\001\002\000\006\030\031" +
    "\057\027\001\002\000\004\035\ufff6\001\002\000\004\035" +
    "\035\001\002\000\004\030\034\001\002\000\004\035\ufff7" +
    "\001\002\000\006\030\ufff4\057\027\001\002\000\004\030" +
    "\ufff5\001\002\000\004\027\151\001\002\000\012\030\uffb1" +
    "\035\uffb1\036\uffb1\042\uffb1\001\002\000\012\030\uffb0\035" +
    "\uffb0\036\uffb0\042\uffb0\001\002\000\030\006\055\026\061" +
    "\027\060\037\062\044\053\051\050\052\057\053\051\057" +
    "\052\061\047\062\064\001\002\000\004\042\046\001\002" +
    "\000\012\030\uffaf\035\uffaf\036\uffaf\042\uffaf\001\002\000" +
    "\012\030\uffae\035\uffae\036\uffae\042\uffae\001\002\000\030" +
    "\006\055\026\061\027\060\037\062\044\053\051\050\052" +
    "\057\053\051\057\052\061\047\062\064\001\002\000\056" +
    "\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\031" +
    "\uff8b\035\uff8b\036\uff8b\037\uff8b\040\uff8b\042\uff8b\044\uff8b" +
    "\045\uff8b\046\uff8b\050\uff8b\051\uff8b\053\uff8b\054\uff8b\055" +
    "\uff8b\056\uff8b\060\uff8b\001\002\000\030\006\055\026\061" +
    "\027\060\037\062\044\053\051\050\052\057\053\051\057" +
    "\052\061\047\062\064\001\002\000\030\006\055\026\061" +
    "\027\060\037\062\044\053\051\050\052\057\053\051\057" +
    "\052\061\047\062\064\001\002\000\056\023\uff8a\024\uff8a" +
    "\025\uff8a\026\uff8a\027\uff8a\030\uff8a\031\uff8a\035\uff8a\036" +
    "\uff8a\037\uff8a\040\uff8a\042\uff8a\044\uff8a\045\uff8a\046\uff8a" +
    "\050\uff8a\051\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\060" +
    "\uff8a\001\002\000\030\006\055\026\061\027\060\037\062" +
    "\044\053\051\050\052\057\053\051\057\052\061\047\062" +
    "\064\001\002\000\034\023\110\024\117\025\111\026\103" +
    "\035\ufff1\044\116\045\115\046\106\050\104\051\114\053" +
    "\112\054\107\060\105\001\002\000\004\027\151\001\002" +
    "\000\056\023\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030" +
    "\uff8e\031\uff8e\035\uff8e\036\uff8e\037\uff8e\040\uff8e\042\uff8e" +
    "\044\uff8e\045\uff8e\046\uff8e\050\uff8e\051\uff8e\053\uff8e\054" +
    "\uff8e\055\uff8e\056\uff8e\060\uff8e\001\002\000\030\006\055" +
    "\026\061\027\060\037\062\044\053\051\050\052\057\053" +
    "\051\057\052\061\047\062\064\001\002\000\030\006\055" +
    "\026\061\027\060\037\062\044\053\051\050\052\057\053" +
    "\051\057\052\061\047\062\064\001\002\000\030\006\055" +
    "\026\061\027\060\037\062\044\053\051\050\052\057\053" +
    "\051\057\052\061\047\062\064\001\002\000\004\057\137" +
    "\001\002\000\056\023\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\042\uff91\044\uff91\045\uff91\046\uff91\050\uff91\051\uff91\053" +
    "\uff91\054\uff91\055\uff91\056\uff91\060\uff91\001\002\000\056" +
    "\023\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031" +
    "\uff8c\035\uff8c\036\uff8c\037\uff8c\040\uff8c\042\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\050\uff8c\051\uff8c\053\uff8c\054\uff8c\055" +
    "\uff8c\056\uff8c\060\uff8c\001\002\000\056\023\uff9d\024\uff9d" +
    "\025\uff9d\026\uff9d\027\075\030\uff9d\031\uff9d\035\uff9d\036" +
    "\uff9d\037\076\040\uff9d\042\uff9d\044\uff9d\045\uff9d\046\uff9d" +
    "\050\uff9d\051\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\060" +
    "\uff9d\001\002\000\056\023\uff90\024\uff90\025\uff90\026\uff90" +
    "\027\uff90\030\uff90\031\uff90\035\uff90\036\uff90\037\uff90\040" +
    "\uff90\042\uff90\044\uff90\045\uff90\046\uff90\050\uff90\051\uff90" +
    "\053\uff90\054\uff90\055\uff90\056\uff90\060\uff90\001\002\000" +
    "\056\023\uff97\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97" +
    "\031\uff97\035\uff97\036\uff97\037\uff97\040\uff97\042\uff97\044" +
    "\uff97\045\uff97\046\uff97\050\uff97\051\uff97\053\uff97\054\uff97" +
    "\055\uff97\056\uff97\060\uff97\001\002\000\056\023\uff89\024" +
    "\uff89\025\uff89\026\uff89\027\uff89\030\uff89\031\uff89\035\uff89" +
    "\036\uff89\037\uff89\040\uff89\042\uff89\044\uff89\045\uff89\046" +
    "\uff89\050\uff89\051\uff89\053\uff89\054\uff89\055\uff89\056\uff89" +
    "\060\uff89\001\002\000\056\023\uff8d\024\uff8d\025\uff8d\026" +
    "\uff8d\027\uff8d\030\uff8d\031\uff8d\035\uff8d\036\uff8d\037\uff8d" +
    "\040\uff8d\042\uff8d\044\uff8d\045\uff8d\046\uff8d\050\uff8d\051" +
    "\uff8d\053\uff8d\054\uff8d\055\uff8d\056\uff8d\060\uff8d\001\002" +
    "\000\052\023\uffbe\024\uffbe\025\uffbe\026\uffbe\030\uffbe\031" +
    "\uffbe\035\uffbe\036\uffbe\040\uffbe\042\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055\uffbe\056" +
    "\uffbe\060\uffbe\001\002\000\056\023\uff96\024\uff96\025\uff96" +
    "\026\uff96\027\uff96\030\uff96\031\uff96\035\uff96\036\uff96\037" +
    "\uff96\040\uff96\042\uff96\044\uff96\045\uff96\046\uff96\050\uff96" +
    "\051\uff96\053\uff96\054\uff96\055\uff96\056\uff96\060\uff96\001" +
    "\002\000\056\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95" +
    "\030\uff95\031\uff95\035\uff95\036\uff95\037\uff95\040\uff95\042" +
    "\uff95\044\uff95\045\uff95\046\uff95\050\uff95\051\uff95\053\uff95" +
    "\054\uff95\055\uff95\056\uff95\060\uff95\001\002\000\032\006" +
    "\055\026\061\027\060\030\100\037\062\044\053\051\050" +
    "\052\057\053\051\057\052\061\047\062\064\001\002\000" +
    "\004\057\077\001\002\000\056\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\035\uff94\036\uff94\037" +
    "\uff94\040\uff94\042\uff94\044\uff94\045\uff94\046\uff94\050\uff94" +
    "\051\uff94\053\uff94\054\uff94\055\uff94\056\uff94\060\uff94\001" +
    "\002\000\056\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93" +
    "\030\uff93\031\uff93\035\uff93\036\uff93\037\uff93\040\uff93\042" +
    "\uff93\044\uff93\045\uff93\046\uff93\050\uff93\051\uff93\053\uff93" +
    "\054\uff93\055\uff93\056\uff93\060\uff93\001\002\000\004\030" +
    "\135\001\002\000\044\023\110\024\117\025\111\026\103" +
    "\030\uffc0\031\uffc0\035\uffc0\036\113\042\uffc0\044\116\045" +
    "\115\046\106\050\104\051\114\053\112\054\107\060\105" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\052\023\uffbb\024\uffbb\025\111\026\103\030" +
    "\uffbb\031\uffbb\035\uffbb\036\uffbb\040\uffbb\042\uffbb\044\116" +
    "\045\115\046\106\050\104\051\114\053\112\054\107\055" +
    "\uffbb\056\uffbb\060\105\001\002\000\052\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\030\uffb8\031\uffb8\035\uffb8\036\uffb8\040" +
    "\uffb8\042\uffb8\044\uffb8\045\uffb8\046\uffb8\050\uffb8\051\114" +
    "\053\uffb8\054\uffb8\055\uffb8\056\uffb8\060\uffb8\001\002\000" +
    "\052\023\uffb5\024\uffb5\025\uffb5\026\uffb5\030\uffb5\031\uffb5" +
    "\035\uffb5\036\uffb5\040\uffb5\042\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\050\uffb5\051\114\053\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\060\uffb5\001\002\000\052\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\030\uffb2\031\uffb2\035\uffb2\036\uffb2\040\uffb2\042\uffb2" +
    "\044\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\060\uffb2\001\002\000\026\025\uffbf" +
    "\026\uffbf\030\uffbf\031\uffbf\035\uffbf\042\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\050\uffbf\001\002\000\052\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\030\uffb3\031\uffb3\035\uffb3\036\uffb3\040" +
    "\uffb3\042\uffb3\044\uffb3\045\uffb3\046\uffb3\050\uffb3\051\114" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\060\uffb3\001\002\000" +
    "\052\023\uffba\024\uffba\025\uffba\026\uffba\030\uffba\031\uffba" +
    "\035\uffba\036\uffba\040\uffba\042\uffba\044\116\045\115\046" +
    "\106\050\104\051\114\053\112\054\107\055\uffba\056\uffba" +
    "\060\uffba\001\002\000\052\023\uffbc\024\uffbc\025\111\026" +
    "\103\030\uffbc\031\uffbc\035\uffbc\036\uffbc\040\uffbc\042\uffbc" +
    "\044\116\045\115\046\106\050\104\051\114\053\112\054" +
    "\107\055\uffbc\056\uffbc\060\105\001\002\000\052\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6\035\uffb6\036" +
    "\uffb6\040\uffb6\042\uffb6\044\uffb6\045\uffb6\046\uffb6\050\uffb6" +
    "\051\114\053\uffb6\054\uffb6\055\uffb6\056\uffb6\060\uffb6\001" +
    "\002\000\052\023\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4" +
    "\031\uffb4\035\uffb4\036\uffb4\040\uffb4\042\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\050\uffb4\051\114\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\060\uffb4\001\002\000\052\023\uffbd\024\uffbd\025" +
    "\111\026\103\030\uffbd\031\uffbd\035\uffbd\036\uffbd\040\uffbd" +
    "\042\uffbd\044\116\045\115\046\106\050\104\051\114\053" +
    "\112\054\107\055\uffbd\056\uffbd\060\uffbd\001\002\000\052" +
    "\023\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7\035" +
    "\uffb7\036\uffb7\040\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7" +
    "\050\uffb7\051\114\053\uffb7\054\uffb7\055\uffb7\056\uffb7\060" +
    "\uffb7\001\002\000\052\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\030\uffb9\031\uffb9\035\uffb9\036\uffb9\040\uffb9\042\uffb9\044" +
    "\116\045\115\046\106\050\104\051\114\053\112\054\107" +
    "\055\uffb9\056\uffb9\060\uffb9\001\002\000\056\023\uff92\024" +
    "\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\035\uff92" +
    "\036\uff92\037\uff92\040\uff92\042\uff92\044\uff92\045\uff92\046" +
    "\uff92\050\uff92\051\uff92\053\uff92\054\uff92\055\uff92\056\uff92" +
    "\060\uff92\001\002\000\004\037\140\001\002\000\022\002" +
    "\uff6c\006\uff6c\014\uff6c\020\uff6c\022\uff6c\035\uff6c\037\uff6c" +
    "\061\uff6c\001\002\000\004\057\141\001\002\000\056\023" +
    "\uff88\024\uff88\025\uff88\026\uff88\027\uff88\030\uff88\031\uff88" +
    "\035\uff88\036\uff88\037\uff88\040\uff88\042\uff88\044\uff88\045" +
    "\uff88\046\uff88\050\uff88\051\uff88\053\uff88\054\uff88\055\uff88" +
    "\056\uff88\060\uff88\001\002\000\052\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\030\uff9c\031\uff9c\035\uff9c\036\uff9c\040\uff9c" +
    "\042\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\053" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\060\uff9c\001\002\000\034" +
    "\023\110\024\117\025\111\026\103\030\144\044\116\045" +
    "\115\046\106\050\104\051\114\053\112\054\107\060\105" +
    "\001\002\000\056\023\uff8f\024\uff8f\025\uff8f\026\uff8f\027" +
    "\uff8f\030\uff8f\031\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f" +
    "\042\uff8f\044\uff8f\045\uff8f\046\uff8f\050\uff8f\051\uff8f\053" +
    "\uff8f\054\uff8f\055\uff8f\056\uff8f\060\uff8f\001\002\000\052" +
    "\023\uff98\024\uff98\025\uff98\026\uff98\030\uff98\031\uff98\035" +
    "\uff98\036\uff98\040\uff98\042\uff98\044\uff98\045\uff98\046\uff98" +
    "\050\uff98\051\uff98\053\uff98\054\uff98\055\uff98\056\uff98\060" +
    "\uff98\001\002\000\056\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\035\uff87\036\uff87\037\uff87\040" +
    "\uff87\042\uff87\044\uff87\045\uff87\046\uff87\050\uff87\051\uff87" +
    "\053\uff87\054\uff87\055\uff87\056\uff87\060\uff87\001\002\000" +
    "\004\031\175\001\002\000\026\002\uff85\006\uff85\014\uff85" +
    "\022\uff85\027\171\030\uff85\031\uff85\035\uff85\036\uff85\042" +
    "\uff85\001\002\000\006\030\153\057\155\001\002\000\006" +
    "\030\uff7f\036\165\001\002\000\030\002\uff81\006\uff81\014" +
    "\uff81\022\uff81\027\uff81\030\uff81\031\uff81\035\uff81\036\uff81" +
    "\042\uff81\057\uff81\001\002\000\004\030\164\001\002\000" +
    "\014\006\uffc2\036\162\041\uffc2\043\uffc2\057\uffc2\001\002" +
    "\000\010\006\037\043\160\057\044\001\002\000\006\030" +
    "\uff7d\036\uff7d\001\002\000\006\006\037\057\044\001\002" +
    "\000\006\030\uff7c\036\uff7c\001\002\000\004\057\155\001" +
    "\002\000\012\006\uffc1\041\uffc1\043\uffc1\057\uffc1\001\002" +
    "\000\030\002\uff80\006\uff80\014\uff80\022\uff80\027\uff80\030" +
    "\uff80\031\uff80\035\uff80\036\uff80\042\uff80\057\uff80\001\002" +
    "\000\004\057\155\001\002\000\004\030\uff7e\001\002\000" +
    "\024\002\uff84\006\uff84\014\uff84\022\uff84\030\uff84\031\uff84" +
    "\035\uff84\036\uff84\042\uff84\001\002\000\024\002\uff83\006" +
    "\uff83\014\uff83\022\uff83\030\uff83\031\uff83\035\uff83\036\uff83" +
    "\042\uff83\001\002\000\010\006\037\030\153\057\173\001" +
    "\002\000\004\030\174\001\002\000\014\006\uffc2\030\uffaf" +
    "\036\162\043\uffc2\057\uffc2\001\002\000\024\002\uff82\006" +
    "\uff82\014\uff82\022\uff82\030\uff82\031\uff82\035\uff82\036\uff82" +
    "\042\uff82\001\002\000\052\004\217\006\055\013\222\014" +
    "\025\015\210\017\204\021\214\022\022\026\061\027\060" +
    "\031\175\032\uff78\037\062\044\053\051\050\052\057\053" +
    "\051\057\227\061\047\062\064\001\002\000\066\002\uff86" +
    "\006\uff86\014\uff86\022\uff86\023\uff86\024\uff86\025\uff86\026" +
    "\uff86\027\uff86\030\uff86\031\uff86\035\uff86\036\uff86\037\uff86" +
    "\040\uff86\042\uff86\044\uff86\045\uff86\046\uff86\050\uff86\051" +
    "\uff86\053\uff86\054\uff86\055\uff86\056\uff86\060\uff86\001\002" +
    "\000\066\002\uff7b\006\uff7b\014\uff7b\022\uff7b\023\uff7b\024" +
    "\uff7b\025\uff7b\026\uff7b\027\uff7b\030\uff7b\031\uff7b\035\uff7b" +
    "\036\uff7b\037\uff7b\040\uff7b\042\uff7b\044\uff7b\045\uff7b\046" +
    "\uff7b\050\uff7b\051\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b" +
    "\060\uff7b\001\002\000\060\004\uff6a\005\uff6a\006\uff6a\007" +
    "\uff6a\013\uff6a\014\uff6a\015\uff6a\017\uff6a\021\uff6a\022\uff6a" +
    "\026\uff6a\027\uff6a\031\uff6a\032\uff6a\035\007\037\uff6a\044" +
    "\uff6a\051\uff6a\052\uff6a\053\uff6a\057\uff6a\061\uff6a\062\uff6a" +
    "\001\002\000\006\031\uffe8\035\uffe8\001\002\000\060\004" +
    "\uff6a\005\uff6a\006\uff6a\007\uff6a\013\uff6a\014\uff6a\015\uff6a" +
    "\017\uff6a\021\uff6a\022\uff6a\026\uff6a\027\uff6a\031\uff6a\032" +
    "\uff6a\035\007\037\uff6a\044\uff6a\051\uff6a\052\uff6a\053\uff6a" +
    "\057\uff6a\061\uff6a\062\uff6a\001\002\000\060\004\uff6a\005" +
    "\uff6a\006\uff6a\007\uff6a\013\uff6a\014\uff6a\015\uff6a\017\uff6a" +
    "\021\uff6a\022\uff6a\026\uff6a\027\uff6a\031\uff6a\032\uff6a\035" +
    "\007\037\uff6a\044\uff6a\051\uff6a\052\uff6a\053\uff6a\057\uff6a" +
    "\061\uff6a\062\uff6a\001\002\000\030\006\055\026\061\027" +
    "\060\037\062\044\053\051\050\052\057\053\051\057\227" +
    "\061\047\062\064\001\002\000\004\035\332\001\002\000" +
    "\006\031\uffe6\035\uffe6\001\002\000\004\041\330\001\002" +
    "\000\030\006\055\026\061\027\060\037\062\044\053\051" +
    "\050\052\057\053\051\057\227\061\047\062\064\001\002" +
    "\000\006\031\uffe7\035\uffe7\001\002\000\046\023\110\024" +
    "\117\025\111\026\103\031\uffe4\035\uffe4\036\113\042\uffc0" +
    "\044\116\045\115\046\106\050\104\051\114\053\112\054" +
    "\107\055\234\056\236\060\105\001\002\000\056\004\217" +
    "\005\uff78\006\055\007\uff78\013\222\014\025\015\210\017" +
    "\204\021\214\022\022\026\061\027\060\031\175\032\uff78" +
    "\037\062\044\053\051\050\052\057\053\051\057\227\061" +
    "\047\062\064\001\002\000\032\006\055\026\061\027\060" +
    "\035\uffc5\037\062\044\053\051\050\052\057\053\051\057" +
    "\052\061\047\062\064\001\002\000\060\004\uff6a\005\uff6a" +
    "\006\uff6a\007\uff6a\013\uff6a\014\uff6a\015\uff6a\017\uff6a\021" +
    "\uff6a\022\uff6a\026\uff6a\027\uff6a\031\uff6a\032\uff6a\035\007" +
    "\037\uff6a\044\uff6a\051\uff6a\052\uff6a\053\uff6a\057\uff6a\061" +
    "\uff6a\062\uff6a\001\002\000\004\035\310\001\002\000\004" +
    "\035\uffc3\001\002\000\020\025\265\026\271\042\270\044" +
    "\267\045\272\046\264\050\266\001\002\000\004\035\263" +
    "\001\002\000\032\006\055\026\061\027\060\031\231\037" +
    "\062\044\053\051\050\052\057\053\051\057\227\061\047" +
    "\062\064\001\002\000\004\032\230\001\002\000\060\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\013\uffd4\014\uffd4\015\uffd4" +
    "\017\uffd4\021\uffd4\022\uffd4\026\uffd4\027\uffd4\031\uffd4\032" +
    "\uffd4\035\uffd4\037\uffd4\044\uffd4\051\uffd4\052\uffd4\053\uffd4" +
    "\057\uffd4\061\uffd4\062\uffd4\001\002\000\056\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\013\ufff0\014\ufff0\015\ufff0\017\ufff0" +
    "\021\ufff0\022\ufff0\026\ufff0\027\ufff0\031\ufff0\032\ufff0\037" +
    "\ufff0\044\ufff0\051\ufff0\052\ufff0\053\ufff0\057\ufff0\061\ufff0" +
    "\062\ufff0\001\002\000\006\031\uffe5\035\uffe5\001\002\000" +
    "\054\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\031\uff8a" +
    "\035\uff8a\036\162\037\uff8a\041\uffc2\042\uff8a\044\uff8a\045" +
    "\uff8a\046\uff8a\050\uff8a\051\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\060\uff8a\001\002\000\120\002\uff7a\004\uff7a\005" +
    "\uff7a\006\uff7a\007\uff7a\011\uff7a\013\uff7a\014\uff7a\015\uff7a" +
    "\017\uff7a\021\uff7a\022\uff7a\023\uff7a\024\uff7a\025\uff7a\026" +
    "\uff7a\027\uff7a\030\uff7a\031\uff7a\032\uff7a\035\uff7a\036\uff7a" +
    "\037\uff7a\040\uff7a\042\uff7a\044\uff7a\045\uff7a\046\uff7a\050" +
    "\uff7a\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a" +
    "\057\uff7a\060\uff7a\061\uff7a\062\uff7a\001\002\000\010\005" +
    "\240\007\243\032\uffce\001\002\000\004\035\251\001\002" +
    "\000\046\023\110\024\117\025\111\026\103\031\235\035" +
    "\uffe4\036\113\042\uffc0\044\116\045\115\046\106\050\104" +
    "\051\114\053\112\054\107\055\234\056\236\060\105\001" +
    "\002\000\006\031\uffe3\035\uffe3\001\002\000\010\005\240" +
    "\007\243\032\uffce\001\002\000\006\031\uffe2\035\uffe2\001" +
    "\002\000\010\005\240\007\243\032\uffce\001\002\000\004" +
    "\040\uffcb\001\002\000\004\040\246\001\002\000\004\032" +
    "\245\001\002\000\030\006\055\026\061\027\060\037\062" +
    "\044\053\051\050\052\057\053\051\057\052\061\047\062" +
    "\064\001\002\000\034\023\110\024\117\025\111\026\103" +
    "\040\uffcc\044\116\045\115\046\106\050\104\051\114\053" +
    "\112\054\107\060\105\001\002\000\060\004\uffd1\005\uffd1" +
    "\006\uffd1\007\uffd1\013\uffd1\014\uffd1\015\uffd1\017\uffd1\021" +
    "\uffd1\022\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\035\uffd1" +
    "\037\uffd1\044\uffd1\051\uffd1\052\uffd1\053\uffd1\057\uffd1\061" +
    "\uffd1\062\uffd1\001\002\000\056\004\217\005\uff78\006\055" +
    "\007\uff78\013\222\014\025\015\210\017\204\021\214\022" +
    "\022\026\061\027\060\031\175\032\uff78\037\062\044\053" +
    "\051\050\052\057\053\051\057\227\061\047\062\064\001" +
    "\002\000\010\005\uffcd\007\uffcd\032\uffcd\001\002\000\004" +
    "\032\uffcf\001\002\000\032\006\055\026\061\027\060\031" +
    "\252\037\062\044\053\051\050\052\057\053\051\057\052" +
    "\061\047\062\064\001\002\000\010\005\240\007\243\032" +
    "\uffce\001\002\000\034\023\110\024\117\025\111\026\103" +
    "\031\254\044\116\045\115\046\106\050\104\051\114\053" +
    "\112\054\107\060\105\001\002\000\010\005\240\007\243" +
    "\032\uffce\001\002\000\004\032\256\001\002\000\060\004" +
    "\uffd0\005\uffd0\006\uffd0\007\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\017\uffd0\021\uffd0\022\uffd0\026\uffd0\027\uffd0\031\uffd0\032" +
    "\uffd0\035\uffd0\037\uffd0\044\uffd0\051\uffd0\052\uffd0\053\uffd0" +
    "\057\uffd0\061\uffd0\062\uffd0\001\002\000\004\032\260\001" +
    "\002\000\060\004\uffd2\005\uffd2\006\uffd2\007\uffd2\013\uffd2" +
    "\014\uffd2\015\uffd2\017\uffd2\021\uffd2\022\uffd2\026\uffd2\027" +
    "\uffd2\031\uffd2\032\uffd2\035\uffd2\037\uffd2\044\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\057\uffd2\061\uffd2\062\uffd2\001\002\000" +
    "\004\032\262\001\002\000\060\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\021\uffd3\022" +
    "\uffd3\026\uffd3\027\uffd3\031\uffd3\032\uffd3\035\uffd3\037\uffd3" +
    "\044\uffd3\051\uffd3\052\uffd3\053\uffd3\057\uffd3\061\uffd3\062" +
    "\uffd3\001\002\000\056\004\uffee\005\uffee\006\uffee\007\uffee" +
    "\013\uffee\014\uffee\015\uffee\017\uffee\021\uffee\022\uffee\026" +
    "\uffee\027\uffee\031\uffee\032\uffee\037\uffee\044\uffee\051\uffee" +
    "\052\uffee\053\uffee\057\uffee\061\uffee\062\uffee\001\002\000" +
    "\004\042\306\001\002\000\004\042\304\001\002\000\004" +
    "\042\302\001\002\000\004\042\300\001\002\000\030\006" +
    "\055\026\061\027\060\037\062\044\053\051\050\052\057" +
    "\053\051\057\052\061\047\062\064\001\002\000\004\042" +
    "\275\001\002\000\004\042\273\001\002\000\030\006\055" +
    "\026\061\027\060\037\062\044\053\051\050\052\057\053" +
    "\051\057\052\061\047\062\064\001\002\000\006\031\uffdd" +
    "\035\uffdd\001\002\000\030\006\055\026\061\027\060\037" +
    "\062\044\053\051\050\052\057\053\051\057\052\061\047" +
    "\062\064\001\002\000\006\031\uffe0\035\uffe0\001\002\000" +
    "\006\031\uffdb\035\uffdb\001\002\000\030\006\055\026\061" +
    "\027\060\037\062\044\053\051\050\052\057\053\051\057" +
    "\052\061\047\062\064\001\002\000\006\031\uffdf\035\uffdf" +
    "\001\002\000\030\006\055\026\061\027\060\037\062\044" +
    "\053\051\050\052\057\053\051\057\052\061\047\062\064" +
    "\001\002\000\006\031\uffde\035\uffde\001\002\000\030\006" +
    "\055\026\061\027\060\037\062\044\053\051\050\052\057" +
    "\053\051\057\052\061\047\062\064\001\002\000\006\031" +
    "\uffe1\035\uffe1\001\002\000\030\006\055\026\061\027\060" +
    "\037\062\044\053\051\050\052\057\053\051\057\052\061" +
    "\047\062\064\001\002\000\006\031\uffdc\035\uffdc\001\002" +
    "\000\056\004\uffed\005\uffed\006\uffed\007\uffed\013\uffed\014" +
    "\uffed\015\uffed\017\uffed\021\uffed\022\uffed\026\uffed\027\uffed" +
    "\031\uffed\032\uffed\037\uffed\044\uffed\051\uffed\052\uffed\053" +
    "\uffed\057\uffed\061\uffed\062\uffed\001\002\000\056\004\uffea" +
    "\005\uffea\006\uffea\007\uffea\013\uffea\014\uffea\015\uffea\017" +
    "\uffea\021\uffea\022\uffea\026\uffea\027\uffea\031\uffea\032\uffea" +
    "\037\uffea\044\uffea\051\uffea\052\uffea\053\uffea\057\uffea\061" +
    "\uffea\062\uffea\001\002\000\004\035\uffc4\001\002\000\010" +
    "\005\uff79\007\uff79\032\uff79\001\002\000\004\035\322\001" +
    "\002\000\046\023\110\024\117\025\111\026\103\031\175" +
    "\035\uffe4\036\113\042\uffc0\044\116\045\115\046\106\050" +
    "\104\051\114\053\112\054\107\055\234\056\236\060\105" +
    "\001\002\000\062\004\uffda\005\uffda\006\uffda\007\uffda\011" +
    "\317\013\uffda\014\uffda\015\uffda\017\uffda\021\uffda\022\uffda" +
    "\026\uffda\027\uffda\031\uffda\032\uffda\035\uffda\037\uffda\044" +
    "\uffda\051\uffda\052\uffda\053\uffda\057\uffda\061\uffda\062\uffda" +
    "\001\002\000\006\015\210\031\175\001\002\000\060\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\026\uffd8\027\uffd8\031\uffd8\032" +
    "\uffd8\035\uffd8\037\uffd8\044\uffd8\051\uffd8\052\uffd8\053\uffd8" +
    "\057\uffd8\061\uffd8\062\uffd8\001\002\000\060\004\uffd7\005" +
    "\uffd7\006\uffd7\007\uffd7\013\uffd7\014\uffd7\015\uffd7\017\uffd7" +
    "\021\uffd7\022\uffd7\026\uffd7\027\uffd7\031\uffd7\032\uffd7\035" +
    "\uffd7\037\uffd7\044\uffd7\051\uffd7\052\uffd7\053\uffd7\057\uffd7" +
    "\061\uffd7\062\uffd7\001\002\000\030\006\055\026\061\027" +
    "\060\037\062\044\053\051\050\052\057\053\051\057\052" +
    "\061\047\062\064\001\002\000\034\023\110\024\117\025" +
    "\111\026\103\031\175\044\116\045\115\046\106\050\104" +
    "\051\114\053\112\054\107\060\105\001\002\000\062\004" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\011\325\013\uffd9\014\uffd9" +
    "\015\uffd9\017\uffd9\021\uffd9\022\uffd9\026\uffd9\027\uffd9\031" +
    "\uffd9\032\uffd9\035\uffd9\037\uffd9\044\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\057\uffd9\061\uffd9\062\uffd9\001\002\000\006\015" +
    "\210\031\175\001\002\000\060\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\021\uffd6\022" +
    "\uffd6\026\uffd6\027\uffd6\031\uffd6\032\uffd6\035\uffd6\037\uffd6" +
    "\044\uffd6\051\uffd6\052\uffd6\053\uffd6\057\uffd6\061\uffd6\062" +
    "\uffd6\001\002\000\060\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\017\uffd5\021\uffd5\022\uffd5\026" +
    "\uffd5\027\uffd5\031\uffd5\032\uffd5\035\uffd5\037\uffd5\044\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\057\uffd5\061\uffd5\062\uffd5\001" +
    "\002\000\030\006\055\026\061\027\060\037\062\044\053" +
    "\051\050\052\057\053\051\057\052\061\047\062\064\001" +
    "\002\000\036\023\110\024\117\025\111\026\103\031\uffa5" +
    "\035\uffa5\044\116\045\115\046\106\050\104\051\114\053" +
    "\112\054\107\060\105\001\002\000\056\004\uffef\005\uffef" +
    "\006\uffef\007\uffef\013\uffef\014\uffef\015\uffef\017\uffef\021" +
    "\uffef\022\uffef\026\uffef\027\uffef\031\uffef\032\uffef\037\uffef" +
    "\044\uffef\051\uffef\052\uffef\053\uffef\057\uffef\061\uffef\062" +
    "\uffef\001\002\000\004\035\uffc7\001\002\000\004\035\337" +
    "\001\002\000\004\031\175\001\002\000\060\004\uffca\005" +
    "\uffca\006\uffca\007\uffca\013\uffca\014\uffca\015\uffca\017\uffca" +
    "\021\uffca\022\uffca\026\uffca\027\uffca\031\uffca\032\uffca\035" +
    "\uffca\037\uffca\044\uffca\051\uffca\052\uffca\053\uffca\057\uffca" +
    "\061\uffca\062\uffca\001\002\000\030\006\055\026\061\027" +
    "\060\037\062\044\053\051\050\052\057\053\051\057\052" +
    "\061\047\062\064\001\002\000\034\023\110\024\117\025" +
    "\111\026\103\035\uffc8\044\116\045\115\046\106\050\104" +
    "\051\114\053\112\054\107\060\105\001\002\000\004\035" +
    "\342\001\002\000\030\006\055\026\061\027\060\037\062" +
    "\044\053\051\050\052\057\053\051\057\227\061\047\062" +
    "\064\001\002\000\004\031\uffc9\001\002\000\004\031\uffc6" +
    "\001\002\000\056\004\uffec\005\uffec\006\uffec\007\uffec\013" +
    "\uffec\014\uffec\015\uffec\017\uffec\021\uffec\022\uffec\026\uffec" +
    "\027\uffec\031\uffec\032\uffec\037\uffec\044\uffec\051\uffec\052" +
    "\uffec\053\uffec\057\uffec\061\uffec\062\uffec\001\002\000\056" +
    "\004\uffe9\005\uffe9\006\uffe9\007\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\017\uffe9\021\uffe9\022\uffe9\026\uffe9\027\uffe9\031\uffe9" +
    "\032\uffe9\037\uffe9\044\uffe9\051\uffe9\052\uffe9\053\uffe9\057" +
    "\uffe9\061\uffe9\062\uffe9\001\002\000\056\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\021" +
    "\uffeb\022\uffeb\026\uffeb\027\uffeb\031\uffeb\032\uffeb\037\uffeb" +
    "\044\uffeb\051\uffeb\052\uffeb\053\uffeb\057\uffeb\061\uffeb\062" +
    "\uffeb\001\002\000\052\023\uff9a\024\uff9a\025\uff9a\026\uff9a" +
    "\030\uff9a\031\uff9a\035\uff9a\036\uff9a\040\uff9a\042\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\050\uff9a\051\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\056\uff9a\060\uff9a\001\002\000\052\023\uff99\024" +
    "\uff99\025\uff99\026\uff99\030\uff99\031\uff99\035\uff99\036\uff99" +
    "\040\uff99\042\uff99\044\uff99\045\uff99\046\uff99\050\uff99\051" +
    "\uff99\053\uff99\054\uff99\055\uff99\056\uff99\060\uff99\001\002" +
    "\000\052\023\uff9b\024\uff9b\025\uff9b\026\uff9b\030\uff9b\031" +
    "\uff9b\035\uff9b\036\uff9b\040\uff9b\042\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\050\uff9b\051\uff9b\053\uff9b\054\uff9b\055\uff9b\056" +
    "\uff9b\060\uff9b\001\002\000\034\023\110\024\117\025\111" +
    "\026\103\035\ufff2\044\116\045\115\046\106\050\104\051" +
    "\114\053\112\054\107\060\105\001\002\000\012\030\uffad" +
    "\035\uffad\036\uffad\042\uffad\001\002\000\060\002\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\013\ufffa\014\ufffa\015\ufffa" +
    "\017\ufffa\021\ufffa\022\ufffa\026\ufffa\027\ufffa\031\ufffa\032" +
    "\ufffa\037\ufffa\044\ufffa\051\ufffa\052\ufffa\053\ufffa\057\ufffa" +
    "\061\ufffa\062\ufffa\001\002\000\010\006\037\042\366\057" +
    "\044\001\002\000\006\030\uffa9\057\356\001\002\000\004" +
    "\035\uffac\001\002\000\004\030\365\001\002\000\004\035" +
    "\363\001\002\000\006\030\uffa9\057\356\001\002\000\004" +
    "\030\uffaa\001\002\000\004\035\uffab\001\002\000\030\006" +
    "\055\026\061\027\060\037\062\044\053\051\050\052\057" +
    "\053\051\057\052\061\047\062\064\001\002\000\006\035" +
    "\uffa7\042\370\001\002\000\030\006\055\026\061\027\060" +
    "\037\062\044\053\051\050\052\057\053\051\057\052\061" +
    "\047\062\064\001\002\000\034\023\110\024\117\025\111" +
    "\026\103\035\uffa6\044\116\045\115\046\106\050\104\051" +
    "\114\053\112\054\107\060\105\001\002\000\034\023\110" +
    "\024\117\025\111\026\103\035\uffa8\044\116\045\115\046" +
    "\106\050\104\051\114\053\112\054\107\060\105\001\002" +
    "\000\012\002\ufffb\006\ufffb\014\ufffb\022\ufffb\001\002\000" +
    "\012\002\ufffc\006\ufffc\014\ufffc\022\ufffc\001\002\000\004" +
    "\002\uffff\001\002\000\004\027\uffa2\001\002\000\004\057" +
    "\uff9f\001\002\000\004\057\u0105\001\002\000\004\027\151" +
    "\001\002\000\014\002\uffa4\006\uffa4\014\uffa4\022\uffa4\035" +
    "\uffa4\001\002\000\016\002\uffa3\006\uffa3\014\uffa3\022\uffa3" +
    "\031\175\035\uffa3\001\002\000\004\027\151\001\002\000" +
    "\004\027\uff9e\001\002\000\014\002\uffa1\006\uffa1\014\uffa1" +
    "\022\uffa1\035\uffa1\001\002\000\016\002\uffa0\006\uffa0\014" +
    "\uffa0\022\uffa0\031\175\035\uffa0\001\002\000\060\002\ufff9" +
    "\004\ufff9\005\ufff9\006\ufff9\007\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\017\ufff9\021\ufff9\022\ufff9\026\ufff9\027\ufff9\031\ufff9" +
    "\032\ufff9\037\ufff9\044\ufff9\051\ufff9\052\ufff9\053\ufff9\057" +
    "\ufff9\061\ufff9\062\ufff9\001\002\000\014\002\uff75\006\uff75" +
    "\014\uff75\020\011\022\uff75\001\002\000\012\002\uff76\006" +
    "\uff76\014\uff76\022\uff76\001\002\000\004\061\u010e\001\002" +
    "\000\026\002\uff70\006\uff70\014\uff70\020\uff70\022\uff70\030" +
    "\uff70\035\uff70\037\uff70\057\uff70\061\uff70\001\002\000\016" +
    "\002\uff74\006\uff74\014\uff74\020\uff74\022\uff74\035\uff74\001" +
    "\002\000\026\002\uff6d\006\uff6d\014\uff6d\020\uff6d\022\uff6d" +
    "\030\uff6d\035\uff6d\037\uff6d\057\uff6d\061\uff6d\001\002\000" +
    "\012\030\uff71\037\u0110\057\137\061\u010e\001\002\000\004" +
    "\061\u010e\001\002\000\026\002\uff6f\006\uff6f\014\uff6f\020" +
    "\uff6f\022\uff6f\030\uff6f\035\uff6f\037\uff6f\057\uff6f\061\uff6f" +
    "\001\002\000\004\030\u0116\001\002\000\014\030\uff6a\035" +
    "\007\037\uff6a\057\uff6a\061\uff6a\001\002\000\012\030\uff71" +
    "\037\u0110\057\137\061\u010e\001\002\000\004\030\uff72\001" +
    "\002\000\016\002\uff73\006\uff73\014\uff73\020\uff73\022\uff73" +
    "\035\uff73\001\002\000\026\002\uff6e\006\uff6e\014\uff6e\020" +
    "\uff6e\022\uff6e\030\uff6e\035\uff6e\037\uff6e\057\uff6e\061\uff6e" +
    "\001\002\000\016\002\uff77\006\uff77\014\uff77\020\uff77\022" +
    "\uff77\035\uff77\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\004\010\u0117\001\001\000\004\014\007\001\001" +
    "\000\002\001\001\000\006\004\012\005\011\001\001\000" +
    "\010\010\u010a\012\u010c\013\u010b\001\001\000\004\014\u0108" +
    "\001\001\000\020\006\016\007\022\015\015\016\017\017" +
    "\020\020\023\021\013\001\001\000\002\001\001\000\010" +
    "\043\376\061\u0100\063\377\001\001\000\002\001\001\000" +
    "\020\006\016\007\374\015\015\016\017\017\020\020\023" +
    "\021\013\001\001\000\004\014\373\001\001\000\004\014" +
    "\372\001\001\000\004\056\357\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\025\001\001\000\002\001" +
    "\001\000\012\045\042\053\037\054\040\055\044\001\001" +
    "\000\006\022\031\023\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\031\023\035\001\001\000\002\001\001\000\006\041" +
    "\353\043\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\026\064\027\071\030\066\033\062\034\065\035" +
    "\055\036\070\037\067\105\352\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\026\064\027" +
    "\071\030\066\033\062\034\065\035\055\036\070\037\067" +
    "\105\053\001\001\000\002\001\001\000\022\026\064\027" +
    "\351\030\066\033\062\034\065\035\055\036\070\037\067" +
    "\001\001\000\022\026\064\027\350\030\066\033\062\034" +
    "\065\035\055\036\070\037\067\001\001\000\002\001\001" +
    "\000\022\026\064\027\347\030\066\033\062\034\065\035" +
    "\055\036\070\037\067\001\001\000\002\001\001\000\010" +
    "\040\145\041\146\043\147\001\001\000\002\001\001\000" +
    "\022\026\064\027\144\030\066\033\062\034\065\035\055" +
    "\036\070\037\067\001\001\000\024\026\064\027\071\030" +
    "\066\033\062\034\065\035\055\036\070\037\067\105\142" +
    "\001\001\000\022\026\064\027\141\030\066\033\062\034" +
    "\065\035\055\036\070\037\067\001\001\000\004\010\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\031" +
    "\072\032\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\025\100\026\064" +
    "\027\071\030\066\033\062\034\065\035\055\036\070\037" +
    "\067\105\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\026\064\027\071\030\066\033\062\034\065\035\055" +
    "\036\070\037\067\105\133\001\001\000\024\026\064\027" +
    "\071\030\066\033\062\034\065\035\055\036\070\037\067" +
    "\105\132\001\001\000\024\026\064\027\071\030\066\033" +
    "\062\034\065\035\055\036\070\037\067\105\131\001\001" +
    "\000\024\026\064\027\071\030\066\033\062\034\065\035" +
    "\055\036\070\037\067\105\130\001\001\000\024\026\064" +
    "\027\071\030\066\033\062\034\065\035\055\036\070\037" +
    "\067\105\127\001\001\000\024\026\064\027\071\030\066" +
    "\033\062\034\065\035\055\036\070\037\067\105\126\001" +
    "\001\000\024\026\064\027\071\030\066\033\062\034\065" +
    "\035\055\036\070\037\067\105\125\001\001\000\024\026" +
    "\064\027\071\030\066\033\062\034\065\035\055\036\070" +
    "\037\067\105\124\001\001\000\026\025\123\026\064\027" +
    "\071\030\066\033\062\034\065\035\055\036\070\037\067" +
    "\105\101\001\001\000\024\026\064\027\071\030\066\033" +
    "\062\034\065\035\055\036\070\037\067\105\122\001\001" +
    "\000\024\026\064\027\071\030\066\033\062\034\065\035" +
    "\055\036\070\037\067\105\121\001\001\000\024\026\064" +
    "\027\071\030\066\033\062\034\065\035\055\036\070\037" +
    "\067\105\120\001\001\000\024\026\064\027\071\030\066" +
    "\033\062\034\065\035\055\036\070\037\067\105\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\175\050\176\001\001\000\006\043" +
    "\167\044\166\001\001\000\010\024\155\046\153\047\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\045\156\053\037\054\040" +
    "\055\044\001\001\000\002\001\001\000\012\045\160\053" +
    "\037\054\040\055\044\001\001\000\002\001\001\000\004" +
    "\024\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\024\155\046\165\047\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\024\155\045" +
    "\171\046\153\047\151\053\037\054\040\055\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\015\224\020\023\021\013\024\206\025\217\026\064" +
    "\027\071\030\066\033\062\034\065\035\055\036\070\037" +
    "\067\050\202\051\222\052\212\060\225\064\204\065\220" +
    "\066\215\067\177\070\214\071\201\072\200\073\210\074" +
    "\205\075\223\105\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\346\001\001\000\002\001\001\000" +
    "\004\014\345\001\001\000\004\014\344\001\001\000\046" +
    "\024\206\025\217\026\064\027\071\030\066\033\062\034" +
    "\065\035\055\036\070\037\067\060\225\064\332\072\200" +
    "\073\210\074\205\076\333\101\334\105\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\024\206\025\217\026\064\027\071\030\066\033\062\034" +
    "\065\035\055\036\070\037\067\060\225\064\313\072\200" +
    "\073\210\074\205\105\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\072\015\224\020\023\021\013\024\206" +
    "\025\217\026\064\027\071\030\066\033\062\034\065\035" +
    "\055\036\070\037\067\050\202\051\312\052\212\060\225" +
    "\064\204\065\220\066\215\067\177\070\214\071\201\072" +
    "\200\073\210\074\205\075\223\105\211\001\001\000\026" +
    "\025\311\026\064\027\071\030\066\033\062\034\065\035" +
    "\055\036\070\037\067\105\101\001\001\000\004\014\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\024\206\025\217\026\064" +
    "\027\071\030\066\033\062\034\065\035\055\036\070\037" +
    "\067\060\225\064\231\072\200\073\210\074\205\105\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\102\260\103\236\104\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\102\241" +
    "\103\236\104\240\001\001\000\002\001\001\000\010\102" +
    "\247\103\236\104\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\026\064\027\071\030" +
    "\066\033\062\034\065\035\055\036\070\037\067\105\243" +
    "\001\001\000\002\001\001\000\002\001\001\000\072\015" +
    "\224\020\023\021\013\024\206\025\217\026\064\027\071" +
    "\030\066\033\062\034\065\035\055\036\070\037\067\050" +
    "\202\051\246\052\212\060\225\064\204\065\220\066\215" +
    "\067\177\070\214\071\201\072\200\073\210\074\205\075" +
    "\223\105\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\026\064\027\071\030\066\033\062\034\065\035" +
    "\055\036\070\037\067\105\252\001\001\000\010\102\256" +
    "\103\236\104\240\001\001\000\002\001\001\000\010\102" +
    "\254\103\236\104\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\025\276\026\064\027\071\030\066\033\062\034\065" +
    "\035\055\036\070\037\067\105\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\025\273\026\064\027\071" +
    "\030\066\033\062\034\065\035\055\036\070\037\067\105" +
    "\101\001\001\000\002\001\001\000\026\025\275\026\064" +
    "\027\071\030\066\033\062\034\065\035\055\036\070\037" +
    "\067\105\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\025\300\026\064\027\071\030\066\033\062\034" +
    "\065\035\055\036\070\037\067\105\101\001\001\000\002" +
    "\001\001\000\026\025\302\026\064\027\071\030\066\033" +
    "\062\034\065\035\055\036\070\037\067\105\101\001\001" +
    "\000\002\001\001\000\026\025\304\026\064\027\071\030" +
    "\066\033\062\034\065\035\055\036\070\037\067\105\101" +
    "\001\001\000\002\001\001\000\026\025\306\026\064\027" +
    "\071\030\066\033\062\034\065\035\055\036\070\037\067" +
    "\105\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\315\001\001\000\002\001\001\000" +
    "\006\050\320\067\317\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\026\064\027\071\030\066\033\062\034" +
    "\065\035\055\036\070\037\067\105\322\001\001\000\004" +
    "\050\323\001\001\000\002\001\001\000\006\050\326\067" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\026\064\027\071\030\066\033\062\034\065\035\055\036" +
    "\070\037\067\105\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\050" +
    "\335\001\001\000\002\001\001\000\026\026\064\027\071" +
    "\030\066\033\062\034\065\035\055\036\070\037\067\100" +
    "\340\105\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\024\206\025\217\026\064\027\071\030\066\033" +
    "\062\034\065\035\055\036\070\037\067\060\225\064\343" +
    "\072\200\073\210\074\205\077\342\105\211\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\045\366\053\037\054\040\055" +
    "\044\001\001\000\006\056\361\057\360\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\056" +
    "\361\057\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\026\064\027\071\030\066\033\062\034\065\035" +
    "\055\036\070\037\067\105\371\001\001\000\002\001\001" +
    "\000\024\026\064\027\071\030\066\033\062\034\065\035" +
    "\055\036\070\037\067\105\370\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\u0103\001\001\000\010\040\u0101\041\u0102\043\147\001" +
    "\001\000\002\001\001\000\006\042\175\050\176\001\001" +
    "\000\010\040\u0105\041\u0106\043\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\042\175\050\176\001\001" +
    "\000\002\001\001\000\006\004\u0109\005\011\001\001\000" +
    "\002\001\001\000\004\013\u0116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\u010a\011" +
    "\u0111\012\u0112\013\u010b\001\001\000\004\013\u0110\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\u0113\001" +
    "\001\000\012\010\u010a\011\u0114\012\u0112\013\u010b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sourceFile EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sourceFile ::= packageClause optionalSemiColon importDecls topLevelDecls 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sourceFile",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // topLevelDecls ::= topLevelDecl topLevelDecls 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = a+b;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // topLevelDecls ::= 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecls",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // topLevelDecl ::= declaration 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = d;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // topLevelDecl ::= functionDecl optionalSemiColon 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = d+o;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // topLevelDecl ::= methodDecl optionalSemiColon 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = m+o;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("topLevelDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= constDecl SEMI_COLON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = c+"\n";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= varDecl SEMI_COLON 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = v+"\n";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constDecl ::= CONST constSpec 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = c;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constDecl ::= CONST OPEN_PARAN constSpecs CLOSE_PARAN 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = c;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constDecl ::= CONST OPEN_PARAN CLOSE_PARAN 
            {
              String RESULT =null;
		
				RESULT ="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constDecl",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constSpecs ::= constSpec SEMI_COLON constSpecs 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpecs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constSpecs ::= constSpec SEMI_COLON 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpecs",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constSpec ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i+":";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constSpec ::= IDENTIFIER EQUAL expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i+" = "+e.code;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constSpec ::= IDENTIFIER type EQUAL expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i+" = "+e.code;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constSpec",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= declaration 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= simpleStmt SEMI_COLON 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = s+"\n";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= returnStmt SEMI_COLON 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = r+"\n";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= breakStmt SEMI_COLON 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = b+"\n";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement ::= block optionalSemiColon 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = b+o;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement ::= ifStmt optionalSemiColon 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i+o;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // statement ::= switchStmt optionalSemiColon 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = s+o;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // statement ::= forStmt optionalSemiColon 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = f+o;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // simpleStmt ::= expressionStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simpleStmt ::= incDecStmt 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simpleStmt ::= assignment 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simpleStmt ::= shortVarDecl 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleStmt",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expressionStmt ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = e.code;
					// System.out.println(RESULT);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionStmt",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // incDecStmt ::= expression INCREMENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e.code+"++";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incDecStmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // incDecStmt ::= expression DECREMENT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e.code+"--";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incDecStmt",57, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assignment ::= expressionList PLUS EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Express dds = new Express();
				RESULT = e1+"+"+" ="+dds.counter+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignment ::= expressionList MINUS EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Express dds = new Express();
				RESULT = e1+"-"+" ="+dds.counter+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assignment ::= expressionList ASTRISK EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Express dds = new Express();
				RESULT = e1+"*"+" ="+dds.counter+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // assignment ::= expressionList SLASH EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Express dds = new Express();
				RESULT = e1+"/"+" ="+dds.counter+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // assignment ::= expressionList SHIFT_LEFT EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Express dds = new Express();
				RESULT = e1+"<<"+" ="+dds.counter+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // assignment ::= expressionList SHIFT_RIGHT EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Express dds = new Express();
				RESULT = e1+">>"+" ="+dds.counter+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // assignment ::= expressionList EQUAL expressionList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Express dds = new Express();
				RESULT = e1+" ="+dds.counter+e2;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",58, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ifStmt ::= IF expression block 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = "if" + e.code + b;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ifStmt ::= IF simpleStmt SEMI_COLON expression block 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = "if" + s + ";\n" + e.code + b;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ifStmt ::= IF expression block ELSE ifStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = "if" + e.code + b + el + i;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ifStmt ::= IF expression block ELSE block 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = "if" + e.code + b + el + i;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ifStmt ::= IF simpleStmt SEMI_COLON expression block ELSE ifStmt 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = "if" + s + ";\n" + e.code + b + el+ i;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ifStmt ::= IF simpleStmt SEMI_COLON expression block ELSE block 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String b1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = "if" + s + ";\n" + e.code + b1 + el+ b2;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ifStmt",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // switchStmt ::= exprSwitchStmt 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("switchStmt",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exprSwitchStmt ::= SWITCH OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = "switch"+"{"+e+"}\n";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprSwitchStmt ::= SWITCH simpleStmt SEMI_COLON OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = "switch"+ s + ";\n" + "{" + e + "}\n";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprSwitchStmt ::= SWITCH expression OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = "switch"+ e.code + "{" + e2 + "}\n";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprSwitchStmt ::= SWITCH simpleStmt SEMI_COLON expression OPEN_CURLY exprCaseClauses CLOSE_CURLY 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = "switch"+ s + ";\n" + e.code + "{" + e1 + "}\n";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchStmt",59, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exprCaseClauses ::= exprCaseClause exprCaseClauses 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = e+e2;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClauses",64, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exprCaseClauses ::= 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClauses",64, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exprCaseClause ::= exprSwitchCase COLON statementList 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = e+":"+s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprCaseClause",65, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exprSwitchCase ::= CASE expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = "case" + e.code;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchCase",66, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exprSwitchCase ::= DEFAULT 
            {
              String RESULT =null;
		
					RESULT = "default";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprSwitchCase",66, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // forStmt ::= FOR forClause block 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = "for" + f + b;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forStmt",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // forClause ::= initStmt SEMI_COLON condition SEMI_COLON postStmt 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i + ";\n" + c + ";\n" + p;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("forClause",63, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // condition ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = e.code;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condition",62, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // initStmt ::= simpleStmt 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initStmt",60, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // postStmt ::= simpleStmt 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postStmt",61, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // returnStmt ::= RETURN 
            {
              String RESULT =null;
		
				RESULT = "return";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // returnStmt ::= RETURN expressionList 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = "return" + e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",51, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // breakStmt ::= BREAK 
            {
              String RESULT =null;
		
				RESULT = "break";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("breakStmt",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // identifierList ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // identifierList ::= IDENTIFIER COMMA identifierList 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i+c+l;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expressionList ::= expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = e.code;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expressionList ::= expression COMMA expressionList 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = e.code+","+l;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= unaryExpr 
            {
              Express RESULT =null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT  =  new Express();
				RESULT.setCode(u);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= expression REL_OP expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,r,b);
				RESULT.address = Express.Temp();
				// System.out.println(RESULT.code);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= expression OR_OP expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"||",b);
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= expression AND_OP expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"&&",b);
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= expression PLUS expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"+",b);
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= expression MINUS expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"-",b);
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= expression ASTRISK expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"*",b);
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= expression SLASH expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"/",b);
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= expression PERCENT expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"%",b);
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= expression SHIFT_LEFT expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"<<",b);
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= expression SHIFT_RIGHT expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,">>",b);
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression AMBERSAND expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"&",b);
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= expression EXCLAMATION expression 
            {
              Express RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Express a = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express b = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT= new Express(a,"!",b);
				RESULT.address = Express.Temp();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",67, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // type ::= typeName 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = a;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // type ::= typeLit 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = b;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // typeName ::= IDENTIFIER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = a;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeName",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // typeLit ::= functionType 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = f;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeLit",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // functionType ::= FUNC signature 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT =  s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionType",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // varDecl ::= VAR varSpec 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = v;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // varDecl ::= VAR OPEN_PARAN varSpecs CLOSE_PARAN 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = v ;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // varSpecs ::= varSpec SEMI_COLON varSpecs 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpecs",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // varSpecs ::= 
            {
              String RESULT =null;
		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpecs",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // varSpec ::= IDENTIFIER EQUAL expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = i+" ="+e.code;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // varSpec ::= IDENTIFIER type 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = i+t;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // varSpec ::= IDENTIFIER type EQUAL expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = i+t+" ="+e.code;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varSpec",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // shortVarDecl ::= identifierList COLON_EQUAL expression 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i+e.code;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shortVarDecl",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // functionDecl ::= FUNC functionName function 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = n+f;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // functionDecl ::= FUNC functionName signature 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = n+s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // functionName ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionName",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // methodDecl ::= FUNC receiver methodName function 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = "func"+r+m+f;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // methodDecl ::= FUNC receiver methodName signature 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = "func"+r+m+s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDecl",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // receiver ::= parameters 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = p;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("receiver",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // methodName ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i;
				// System.out.println(RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodName",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // unaryExpr ::= primaryExpr 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT=s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // unaryExpr ::= MINUS unaryExpr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT ="-"+b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // unaryExpr ::= EXCLAMATION unaryExpr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT ="!"+b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // unaryExpr ::= ASTRISK unaryExpr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT ="*"+b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // unaryExpr ::= AMBERSAND unaryExpr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT ="&"+b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // unaryExpr ::= LESS_DASH unaryExpr 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT ="<-"+b;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // primaryExpr ::= operand 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = o;
				// System.out.println(RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // primaryExpr ::= primaryExpr selector 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Express d= new Express();
				RESULT = p+s;
				// System.out.println(RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // primaryExpr ::= primaryExpr arguments 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				Express s= new Express();
				RESULT = "push_params: "+ a + "\nt" + s.counter + "= " + "call" + p +"\npop_params;";
				// System.out.println(RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // selector ::= DOT IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT =i;
				// System.out.println(RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selector",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // arguments ::= OPEN_PARAN CLOSE_PARAN 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // arguments ::= OPEN_PARAN expressionList CLOSE_PARAN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = e;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operand ::= literal 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = l;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operand ::= operandName 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = o;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operand ::= OPEN_PARAN expression CLOSE_PARAN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Express e = (Express)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT =  e.code;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // literal ::= basicLit 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = b;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // literal ::= functionLit 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = f;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // basicLit ::= INT_LIT 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = ""+i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basicLit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // basicLit ::= STRING_LIT 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = s;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basicLit",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operandName ::= IDENTIFIER 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandName",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operandName ::= qualifiedIdent 
            {
              String RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = q;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operandName",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // qualifiedIdent ::= DOT packageName DOT IDENTIFIER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = p+i;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("qualifiedIdent",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // functionLit ::= FUNC function 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = "func"+f;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionLit",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // function ::= signature functionBody 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = s+f;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // signature ::= parameters 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = p;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // signature ::= parameters result 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = p+r;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signature",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // result ::= parameters 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			RESULT = s;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // result ::= OPEN_PARAN type CLOSE_PARAN 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT =  b ;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("result",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // parameters ::= OPEN_PARAN CLOSE_PARAN 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // parameters ::= OPEN_PARAN parameterList CLOSE_PARAN 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = p;
				// System.out.println(RESULT);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // parameterList ::= parameterDecl 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = p;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // parameterList ::= parameterDecl COMMA parameterList 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = p+","+l;
					// System.out.println(RESULT);

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterList",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // parameterDecl ::= identifierList type 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i+t;
					// System.out.println(RESULT);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDecl",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // parameterDecl ::= identifierList CDOTS type 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = i+"..."+t;
					// System.out.println(RESULT);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameterDecl",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // functionBody ::= block 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = "\nbegin_func;\n" + b + "end_func;" ;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionBody",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // block ::= OPEN_CURLY statementList CLOSE_CURLY 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = s;
			// System.out.println(RESULT);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // statementList ::= statement statementList 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = s+l;
				// System.out.println(RESULT);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // statementList ::= 
            {
              String RESULT =null;
		
					RESULT = "";
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statementList",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // packageClause ::= PACKAGE packageName 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = a;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageClause",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // importDecls ::= importDecl optionalSemiColon importDecls 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i + o + d;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // importDecls ::= 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // importDecl ::= IMPORT importSpec 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT ="";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // importDecl ::= IMPORT OPEN_PARAN importSpecs CLOSE_PARAN 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // importSpecs ::= importSpec optionalSemiColon importSpecs 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = "" + o ;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpecs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // importSpecs ::= 
            {
              String RESULT =null;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpecs",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // importSpec ::= importPath 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // importSpec ::= DOT importPath 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = p;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // importSpec ::= packageName importPath 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = p + i;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importSpec",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // importPath ::= STRING_LIT 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = "";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("importPath",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // packageName ::= IDENTIFIER 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = a + ":\n";
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("packageName",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // optionalSemiColon ::= SEMI_COLON 
            {
              String RESULT =null;
		
						RESULT = ";\n";
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemiColon",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // optionalSemiColon ::= 
            {
              String RESULT =null;
		
						RESULT = "";
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemiColon",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
