import java.lang.System;
import java.io.*;
import java.util.Stack;
import java_cup.runtime.Symbol;

%%
%class Lexer

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol
%char
%line





%{
	//initialize  variables to be used by class
	//boolean existAnError=false;
	public static Stack<String> errorTrack = new Stack<String>();

	public static boolean checkForError(String compare) {
		if (errorTrack.peek().equals(compare))
			return true;
		else
			return false;
	}
		
%}


%init{

	//Add code to be executed on initialization of the lexer

	
%init}

NEWLINE=[\n]
TAB=[\t]
SPACE=[" "]*
COMMENT=(//(.)*)
PACKAGE=(package)
IMPORT=(import)
CONST=(const)
EQUAL=(=)
FUNC=(func)
OPEN_PARAN=(\()
CLOSE_PARAN=(\))
OPEN_CURLY=(\{)
CLOSE_CURLY=(\})
OPEN_SQUARE=(\[)
CLOSE_SQUARE=(\])
DOT=(\.)
VAR=(var)
SLASH=(/)
SWITCH=(switch)
COLON_EQUAL=(:=)
SEMI_COLON=(;)
CASE=(case)
COLON=(:)
DEFAULT=(default)
COMMA=(,)
IF=(if)
ELSE=(else)
RETURN=(return)
REL_OP =(==)|(!=)|(<)|(<=)|(>)|(>=)
OR_OP=(\|\|)
AND_OP=(&&)
PLUS=(\+)
MINUS=(\-)
SHIFT_LEFT=(<<)
SHIFT_RIGHT=(>>)
BREAK=(break)
STRUCT=(struct)
TYPE=(type)
FOR=(for)
INT_LIT=([1-9][0-9]*)|0
IDENTIFIER=[A-Za-z_]*[0-9]*
STRING_LIT1=\"[^\"\n]*(i\\)*\"
STRING_LIT2=`[^`\n]*`
STRING_LIT3=\"[^\n]*(i\\)+(\")+
CDOTS=(\.\.\.)
ASTRISK=(\*)
BAR=(\|)
EXCLAMATION=(!)
LESS_DASH=(<\-)
AMBERSAND=(&)
PERCENT=(%)
INCREMENT=(\+\+)
DECREMENT=(\-\-)


%eofval{
	//Add code to be executed when the end of the file is reached
	
	if(errorTrack.isEmpty())
	{
	return (new Symbol(sym.EOF,"Done"));
	}
	
	else if (!errorTrack.isEmpty())
	{
	return (new Symbol(sym.EOF,"There is some "+ errorTrack.peek() +" that is not closed"));
	}

%eofval}


%% 
<YYINITIAL> {NEWLINE} {}
<YYINITIAL> {SPACE} {}
<YYINITIAL> {TAB} {}
<YYINITIAL> {COMMENT} {}
<YYINITIAL> {PACKAGE} { return (new Symbol(sym.PACKAGE,yytext()));}
<YYINITIAL> {IMPORT} { return (new Symbol(sym.IMPORT,yytext()));}
<YYINITIAL> {CONST} { return (new Symbol(sym.CONST,yytext()));}
<YYINITIAL> {EQUAL} { return (new Symbol(sym.EQUAL,yytext()));}
<YYINITIAL> {FUNC} { return (new Symbol(sym.FUNC,yytext()));}
<YYINITIAL> {DOT} { return (new Symbol(sym.DOT,yytext()));}
<YYINITIAL> {VAR} { return (new Symbol(sym.VAR,yytext()));}
<YYINITIAL> {SLASH} { return (new Symbol(sym.SLASH,yytext()));}
<YYINITIAL> {SWITCH} { return (new Symbol(sym.SWITCH,yytext()));}
<YYINITIAL> {COLON_EQUAL} { return (new Symbol(sym.COLON_EQUAL,yytext()));}
<YYINITIAL> {SEMI_COLON} { return (new Symbol(sym.SEMI_COLON,yytext()));}
<YYINITIAL> {CASE} { return (new Symbol(sym.CASE,yytext()));}
<YYINITIAL> {COLON} { return (new Symbol(sym.COLON,yytext()));}
<YYINITIAL> {DEFAULT} { return (new Symbol(sym.DEFAULT,yytext()));}
<YYINITIAL> {COMMA} { return (new Symbol(sym.COMMA,yytext()));}
<YYINITIAL> {IF} { return (new Symbol(sym.IF,yytext()));}
<YYINITIAL> {ELSE} { return (new Symbol(sym.ELSE,yytext()));}
<YYINITIAL> {REL_OP} { return (new Symbol(sym.REL_OP,yytext()));}
<YYINITIAL> {OR_OP} { return (new Symbol(sym.OR_OP,yytext()));}
<YYINITIAL> {AND_OP} { return (new Symbol(sym.AND_OP,yytext()));}
<YYINITIAL> {PLUS} { return (new Symbol(sym.PLUS,yytext()));}
<YYINITIAL> {MINUS} { return (new Symbol(sym.MINUS,yytext()));}
<YYINITIAL> {SHIFT_LEFT} { return (new Symbol(sym.SHIFT_LEFT,yytext()));}
<YYINITIAL> {SHIFT_RIGHT} { return (new Symbol(sym.SHIFT_RIGHT,yytext()));}
<YYINITIAL> {RETURN} { return (new Symbol(sym.RETURN,yytext()));}
<YYINITIAL> {BREAK} { return (new Symbol(sym.BREAK,yytext()));}
<YYINITIAL> {STRUCT} { return (new Symbol(sym.STRUCT,yytext()));}
<YYINITIAL> {TYPE} { return (new Symbol(sym.TYPE,yytext()));}
<YYINITIAL> {FOR} { return (new Symbol(sym.FOR,yytext()));}
<YYINITIAL> {INT_LIT} { return (new Symbol(sym.INT_LIT,yytext()));}
<YYINITIAL> {IDENTIFIER} { return (new Symbol(sym.IDENTIFIER,yytext()));}
<YYINITIAL> {STRING_LIT1} { return (new Symbol(sym.STRING_LIT,yytext()));}
<YYINITIAL> {STRING_LIT2} { return (new Symbol(sym.STRING_LIT,yytext()));}
<YYINITIAL> {STRING_LIT3} { return (new Symbol(sym.STRING_LIT,yytext()));}
<YYINITIAL> {CDOTS} { return (new Symbol(sym.CDOTS,yytext()));}
<YYINITIAL> {ASTRISK} { return (new Symbol(sym.ASTRISK,yytext()));}
<YYINITIAL> {BAR} { return (new Symbol(sym.BAR,yytext()));}
<YYINITIAL> {EXCLAMATION} { return (new Symbol(sym.EXCLAMATION,yytext()));}
<YYINITIAL> {LESS_DASH} { return (new Symbol(sym.LESS_DASH,yytext()));}
<YYINITIAL> {AMBERSAND} { return (new Symbol(sym.AMBERSAND,yytext()));}
<YYINITIAL> {PERCENT} { return (new Symbol(sym.PERCENT,yytext()));}
<YYINITIAL> {INCREMENT} { return (new Symbol(sym.INCREMENT,yytext()));}
<YYINITIAL> {DECREMENT} { return (new Symbol(sym.DECREMENT,yytext()));}



<YYINITIAL> {OPEN_PARAN} {
	errorTrack.push("(");
	return (new Symbol(sym.OPEN_PARAN,yytext()));
}




<YYINITIAL> {CLOSE_PARAN} { 
	int lineValue=yyline;
	lineValue++;

	if(checkForError("(")&&(!errorTrack.isEmpty()))
	{
	  errorTrack.pop();
	  return (new Symbol(sym.CLOSE_PARAN,yytext()));
	}
	
	else if(((!errorTrack.isEmpty())&&(checkForError("(")==false)))
	{
	   return new Symbol(sym.error, ") has no matching ( in line" + " "+ lineValue + "");
	  
	}
	  
	else
	{

	   return new Symbol(sym.error, "You have a missing bracket in line" + " "+ lineValue + "");

	}
	
	
	
}




<YYINITIAL> {OPEN_CURLY} {
	errorTrack.push("{"); 
	return (new Symbol(sym.OPEN_CURLY,yytext()));
	}



<YYINITIAL> {CLOSE_CURLY} { 
	int lineValue=yyline;
	lineValue++;

	
	if(checkForError("{")&&(!errorTrack.isEmpty()))
	{
	  errorTrack.pop();
	  return (new Symbol(sym.CLOSE_CURLY,yytext()));
	}
	if(checkForError("(")||checkForError("["))
	{

	   return new Symbol(sym.error, "You have a missing bracket in line" + " "+ lineValue + "");

	}
	
	else if(((!errorTrack.isEmpty())&&(checkForError("{")==false)))
	{
	   return new Symbol(sym.error, "} has no matching { in line" + " "+ lineValue + "");
	  
	}
	  


	
}

<YYINITIAL> {OPEN_SQUARE} { 
	errorTrack.push("["); 
	return (new Symbol(sym.OPEN_SQUARE,yytext()));
}



<YYINITIAL> {CLOSE_SQUARE} { 

	if(checkForError("[")&&(!errorTrack.isEmpty()))
	{
	  errorTrack.pop();
	  return (new Symbol(sym.CLOSE_SQUARE,yytext()));
	}
	
	else if(errorTrack.isEmpty())
	{
	   return new Symbol(sym.error, "] has no matching [ in line" + " "+ yyline + "");
	  
	}
	  
	else if(((!checkForError("["))&&(!errorTrack.isEmpty())))
	{

	   return new Symbol(sym.error, "You have a missing bracket in line" + " "+ yyline + "");

	}




	}


<YYINITIAL> . {
	int lineValue=yyline;
	lineValue++;

  return new Symbol(sym.error, "Invalid input: " + yytext() + " in line " + lineValue + "");
}
